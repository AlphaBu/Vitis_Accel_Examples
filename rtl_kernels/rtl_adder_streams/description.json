{
    "config_make": "config.mk", 
    "os": [
        "Linux"
    ], 
    "contributors": [
        {
            "url": "http://www.xilinx.com", 
            "group": "Xilinx"
        }
    ], 
    "launch": [
        {
            "cmd_args": "BUILD/adder.xclbin", 
            "name": "sw_emu"
        }, 
        {
            "cmd_args": "BUILD/adder.xclbin", 
            "name": "hw_emu"
        }
    ], 
    "gui": false, 
    "description": [
        "This example shows an adder with streams using 3 RTL kernels."
    ], 
    "name": "Adder With Streams (RTL)", 
    "host": [
        {
            "sources": [
                "src/host.cpp"
            ], 
            "compiler": [
                {
                    "includepaths": [
                        "REPO_DIR/common/includes/xcl2"
                    ]
                }
            ], 
            "linker": [
                {
                    "libraries": [
                        "xcl2"
                    ], 
                    "librarypaths": [
                        "REPO_DIR/common/includes/"
                    ]
                }
            ], 
            "host_exe": "host"
        }
    ], 
    "key_concepts": [
        "RTL Kernel", 
        "Multiple RTL Kernels"
    ], 
    "match_ini": "false", 
    "runtime": [
        "OpenCL"
    ], 
    "targets": [
        "hw", 
        "hw_emu"
    ], 
    "containers": [
        {
            "accelerators": [
                {
                    "kernel_type": "RTL", 
                    "name": "input"
                }, 
                {
                    "kernel_type": "RTL", 
                    "name": "adder"
                }, 
                {
                    "kernel_type": "RTL", 
                    "name": "output"
                }
            ], 
            "ldclflags": "--sc krnl_input_stage_rtl_1.p0:krnl_adder_stage_rtl_1.p0 --sc krnl_adder_stage_rtl_1.p1:krnl_output_stage_rtl_1.p1", 
            "name": "adder"
        }
    ], 
    "output_files": "tmp_kernel_pack* packaged_kernel* _x* *.xo"
}