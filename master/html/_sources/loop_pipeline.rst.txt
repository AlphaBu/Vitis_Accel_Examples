Loop Pipelining 
================

This example demonstrates how loop pipelining can be used to improve the
performance of a kernel.

**KEY CONCEPTS:** Kernel Optimization, Loop Pipelining

**KEYWORDS:** pragma HLS PIPELINE

This example demonstrates how loop pipelining can be used to improve the
performance of a kernel. Pipelining is a technique to increase
instruction level parallelism in the hardware implementation of an
algorithm by overlapping independent stages of operations and functions.

Two kernels ``kernel_vadd`` and ``kernel_pipelined`` are used for
comparison in performance. Kernel execution time will be less for the
pipelined kernel as it uses ``pragma HLS PIPELINE`` in read and write
loops which enables ``burst transfers`` resulting in effective usage of
bandwidth of ``m_axi`` in interface.

.. code:: cpp

   read_a:
           for (int x = 0; x < N; ++x) {
              #pragma HLS LOOP_TRIPCOUNT min=c_n max=c_n
              #pragma HLS PIPELINE II=1
               result[x] = a[i * N + x];
           }

SUPPORTED SHELLS
----------------

================ =============================== ================
SHELL            Board                           Software Version
================ =============================== ================
xilinx_u200_qdma Xilinx Alveo U200               Vitis 2019.2
xilinx_u200_xdma Xilinx Alveo U200               Vitis 2019.2
xilinx_u250_qdma Xilinx Alveo U250               Vitis 2019.2
xilinx_u250_xdma Xilinx Alveo U250               Vitis 2019.2
xilinx_u280_xdma Xilinx Alveo U280               Vitis 2019.2
xilinx_u50_xdma  Xilinx Alveo U50                Vitis 2019.2
zc702_base       Xilinx Zynq-7000 SoC ZC702      Vitis 2019.2
zc706_base       Xilinx Zynq-7000 SoC ZC706      Vitis 2019.2
zcu102_base      Xilinx UltraScale+ MPSoC ZCU102 Vitis 2019.2
zcu104_base      Xilinx UltraScale+ MPSoC ZCU104 Vitis 2019.2
================ =============================== ================

DESIGN FILES
------------

Application code is located in the src directory. Accelerator binary
files will be compiled to the xclbin directory. The xclbin directory is
required by the Makefile and its contents will be filled during
compilation. A listing of all the files in this example is shown below

::

   src/host.cpp
   src/vector_addition.cpp
   src/vector_addition_BAD.cpp

COMMAND LINE ARGUMENTS
----------------------

Once the environment has been configured, the application can be
executed by

::

   ./loop_pipeline <vector_addition XCLBIN>
