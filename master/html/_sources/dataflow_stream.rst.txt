Dataflow Using HLS Stream
=========================

This is simple example of vector addition to demonstrate Dataflow
functionality of HLS. HLS Dataflow allows user to schedule multiple task
together to achieve higher throughput.

**KEY CONCEPTS:** Task Level Parallelism

**KEYWORDS:** dataflow, hls::stream<>

This example explains how ``#pragma HLS dataflow`` can be used to
implement task level parallelism using ``HLS Stream`` datatype.

If the data stored in the array is consumed or produced in a sequential
manner, a more efficient communication mechanism is to use streaming
data as specified by the ``STREAM`` pragma, where FIFOs are used instead
of RAMs. Depth of ``FIFO`` can be specified by ``depth`` option in the
pragma.

.. code:: cpp

   #pragma HLS STREAM variable = inStream depth = 32
   #pragma HLS STREAM variable = outStream depth = 32

Vector addition in kernel is divided into 3 sub-tasks(read, compute_add
and write) which are then performed concurrently using ``Dataflow``.

.. code:: cpp

   #pragma HLS dataflow
       read_input(in, inStream, size);
       compute_add(inStream, outStream, inc, size);
       write_result(out, outStream, size);

SUPPORTED SHELLS
----------------

================ =============================== ================
SHELL            Board                           Software Version
================ =============================== ================
xilinx_u200_qdma Xilinx Alveo U200               Vitis 2019.2
xilinx_u200_xdma Xilinx Alveo U200               Vitis 2019.2
xilinx_u250_qdma Xilinx Alveo U250               Vitis 2019.2
xilinx_u250_xdma Xilinx Alveo U250               Vitis 2019.2
xilinx_u280_xdma Xilinx Alveo U280               Vitis 2019.2
xilinx_u50_xdma  Xilinx Alveo U50                Vitis 2019.2
zc702_base       Xilinx Zynq-7000 SoC ZC702      Vitis 2019.2
zc706_base       Xilinx Zynq-7000 SoC ZC706      Vitis 2019.2
zcu102_base      Xilinx UltraScale+ MPSoC ZCU102 Vitis 2019.2
zcu104_base      Xilinx UltraScale+ MPSoC ZCU104 Vitis 2019.2
================ =============================== ================

DESIGN FILES
------------

Application code is located in the src directory. Accelerator binary
files will be compiled to the xclbin directory. The xclbin directory is
required by the Makefile and its contents will be filled during
compilation. A listing of all the files in this example is shown below

::

   src/adder.cpp
   src/host.cpp

COMMAND LINE ARGUMENTS
----------------------

Once the environment has been configured, the application can be
executed by

::

   ./host <adder XCLBIN>
