Array Partition 
================

This is a simple example of matrix multiplication (Row x Col) to
demonstrate how to achieve better performance by array partitioning,
using HLS kernel in Vitis Environment.

**KEY CONCEPTS:** Kernel Optimization, HLS C Kernel, Array Partition

**KEYWORDS:** #pragma HLS ARRAY_PARTITION, complete

This example demonstrates how ``array partition`` in HLS kernels can
improve the performance of an application. Operations like matrix
multiplication require multiple accesses to data in memory for a single
iteration.

``#pragma HLS array partition`` is used to partition an array into
multiple smaller arrays or memories with more number of ports for read
and write operations. This results in improved throughput of the design.

Arrays can be partitioned in three ways, ``cyclic`` where elements are
put into smaller arrays one by one in the interleaved manner until the
whole array is partitioned, ``block`` where elements are put into
smaller arrays from continuous blocks of original array and ``complete``
where array is decomposed into individual elements each having its own
read/write ports.

.. code:: cpp

   #pragma HLS ARRAY_PARTITION variable = B dim = 2 complete
   #pragma HLS ARRAY_PARTITION variable = C dim = 2 complete
   #pragma HLS ARRAY_PARTITION variable = temp_sum dim = 1 complete

SUPPORTED PLATFORMS
-------------------

==================== ================= ================
Platform             Board             Software Version
==================== ================= ================
xilinx_u200_qdma     Xilinx Alveo U200 Vitis 2019.2
xilinx_u280_xdma     Xilinx Alveo U280 Vitis 2019.2
xilinx_u250_qdma     Xilinx Alveo U250 Vitis 2019.2
xilinx_u200_xdma     Xilinx Alveo U200 Vitis 2019.2
xilinx_u250_xdma     Xilinx Alveo U250 Vitis 2019.2
xilinx_u280-es1_xdma Xilinx Alveo U280 Vitis 2019.2
==================== ================= ================

DESIGN FILES
------------

Application code is located in the src directory. Accelerator binary
files will be compiled to the xclbin directory. The xclbin directory is
required by the Makefile and its contents will be filled during
compilation. A listing of all the files in this example is shown below

::

   src/host.cpp
   src/matmul.cpp
   src/matmul_partition.cpp

COMMAND LINE ARGUMENTS
----------------------

Once the environment has been configured, the application can be
executed by

::

   ./array_partition <matmul XCLBIN>
