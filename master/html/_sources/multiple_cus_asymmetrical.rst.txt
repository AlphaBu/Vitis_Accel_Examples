Vector Addition ~ Asymmetrical Multiple Compute Units 
======================================================

This is simple example of vector addition to demonstrate how to connect
each compute unit to different banks and how to use these compute units
in host applications

**KEY CONCEPTS:** Multiple Compute Units

**KEYWORDS:** #pragma HLS PIPELINE

This example demonstrates how multiple compute units can do parallel
processing where the compute units are asymmetrical i.e.Â connected to
different memory banks.

For kernels to execute concurrently, command queue is initialized with
out of order execution mode enabled as shown below.

.. code:: cpp

   q = cl::CommandQueue(context, device,  CL_QUEUE_PROFILING_ENABLE | CL_QUEUE_OUT_OF_ORDER_EXEC_MODE_ENABLE, &err);

Kernel input and output ports can be connected to different memory banks
for improved bandwidth. ``--sp`` option is used to specify such
connections in ``xocc`` link stage.

::

   LDCLFLAGS += --sp vadd_1.in1:DDR[0] --sp vadd_1.in2:DDR[0] --sp vadd_1.out_r:DDR[0] 
                --sp vadd_2.in1:DDR[1] --sp vadd_2.in2:DDR[1] --sp vadd_2.out_r:DDR[1]

SDAccel allows for different kernels to be associated with different CUs
by name in xocc linking stage using ``--nk`` option.

::

       --nk vadd:4:vadd_1.vadd_2.vadd_3.vadd_4

SUPPORTED PLATFORMS
-------------------

==================== ================= ================
Platform             Board             Software Version
==================== ================= ================
xilinx_u200_qdma     Xilinx Alveo U200 Vitis 2019.2
xilinx_u280_xdma     Xilinx Alveo U280 Vitis 2019.2
xilinx_u250_qdma     Xilinx Alveo U250 Vitis 2019.2
xilinx_u200_xdma     Xilinx Alveo U200 Vitis 2019.2
xilinx_u250_xdma     Xilinx Alveo U250 Vitis 2019.2
xilinx_u280-es1_xdma Xilinx Alveo U280 Vitis 2019.2
==================== ================= ================

DESIGN FILES
------------

Application code is located in the src directory. Accelerator binary
files will be compiled to the xclbin directory. The xclbin directory is
required by the Makefile and its contents will be filled during
compilation. A listing of all the files in this example is shown below

::

   src/host.cpp
   src/vadd.cpp

COMMAND LINE ARGUMENTS
----------------------

Once the environment has been configured, the application can be
executed by

::

   ./host <vadd XCLBIN>
