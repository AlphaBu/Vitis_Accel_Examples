HBM Simple Vector Addition
==========================

This is a simple example of vector addition to describe how to use HLS
kernels with HBM (High Bandwidth Memory) for achieving high throughput.

**KEY CONCEPTS:** High Bandwidth Memory, Multiple HBM Banks

**KEYWORDS:** HBM, XCL_MEM_TOPOLOGY, cl_mem_ext_ptr_t

This example demonstrates how HBM (High Bandwidth Memory) can be
interfaced to reduce the latency of global memory transfers. Two cases
are executed, one HBM bank used for two inputs and one output; three
banks used one each for two inputs and one output. Individual bank for
each buffer will provide more bandwidth for the application.

HBM is a high performance RAM interface for 3D-stacked DRAM. HBM can
provide bandwidth upto 307 GB/s with low power consumption (20% as
compared to GDDR5). There are 32 memory resources referenced as HBM
[0:31] by XOCC and these are accessed via 16 memory controllers.

``cl_mem_ext_ptr`` object needs to be used in cases where memory
assingment is done by user.

.. code:: cpp

   cl_mem_ext_ptr_t inBufExt1, inBufExt2, outBufExt;
   inBufExt1.obj = source_in1.data();
   inBufExt1.param = 0;
   inBufExt1.flags = bank_assign[0];

``CL_MEM_EXT_PTR_XILINX`` must be specified while creating buffers using
HBM.

.. code:: cpp

   cl::Buffer buffer_input1(context, CL_MEM_READ_ONLY | CL_MEM_EXT_PTR_XILINX | CL_MEM_USE_HOST_PTR,
                             sizeof(uint32_t) * size, &inBufExt1, &err));

HBM memory must be associated to respective kernel I/O ports using
``--sp`` option in kernel linking stage.

::

   LDCLFLAGS += --sp krnl_vadd_1.m_axi_gmem0:HBM[0:3] --sp krnl_vadd_1.m_axi_gmem1:HBM[0:3]

SUPPORTED SHELLS
----------------

==================== ================= ================
SHELL                Board             Software Version
==================== ================= ================
xilinx_u280_xdma     Xilinx Alveo U280 Vitis 2019.2
xilinx_u280-es1_xdma Xilinx Alveo U280 Vitis 2019.2
==================== ================= ================

DESIGN FILES
------------

Application code is located in the src directory. Accelerator binary
files will be compiled to the xclbin directory. The xclbin directory is
required by the Makefile and its contents will be filled during
compilation. A listing of all the files in this example is shown below

::

   src/host.cpp
   src/krnl_vadd.cpp

COMMAND LINE ARGUMENTS
----------------------

Once the environment has been configured, the application can be
executed by

::

   ./host <krnl_vadd XCLBIN>
