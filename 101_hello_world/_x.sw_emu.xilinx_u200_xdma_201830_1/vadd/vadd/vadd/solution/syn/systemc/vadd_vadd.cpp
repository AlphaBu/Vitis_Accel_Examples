// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "vadd_vadd.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic vadd_vadd::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic vadd_vadd::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<30> vadd_vadd::ap_ST_fsm_state1 = "1";
const sc_lv<30> vadd_vadd::ap_ST_fsm_state2 = "10";
const sc_lv<30> vadd_vadd::ap_ST_fsm_state3 = "100";
const sc_lv<30> vadd_vadd::ap_ST_fsm_state4 = "1000";
const sc_lv<30> vadd_vadd::ap_ST_fsm_state5 = "10000";
const sc_lv<30> vadd_vadd::ap_ST_fsm_state6 = "100000";
const sc_lv<30> vadd_vadd::ap_ST_fsm_state7 = "1000000";
const sc_lv<30> vadd_vadd::ap_ST_fsm_state8 = "10000000";
const sc_lv<30> vadd_vadd::ap_ST_fsm_state9 = "100000000";
const sc_lv<30> vadd_vadd::ap_ST_fsm_state10 = "1000000000";
const sc_lv<30> vadd_vadd::ap_ST_fsm_pp0_stage0 = "10000000000";
const sc_lv<30> vadd_vadd::ap_ST_fsm_state14 = "100000000000";
const sc_lv<30> vadd_vadd::ap_ST_fsm_state15 = "1000000000000";
const sc_lv<30> vadd_vadd::ap_ST_fsm_state16 = "10000000000000";
const sc_lv<30> vadd_vadd::ap_ST_fsm_state17 = "100000000000000";
const sc_lv<30> vadd_vadd::ap_ST_fsm_state18 = "1000000000000000";
const sc_lv<30> vadd_vadd::ap_ST_fsm_state19 = "10000000000000000";
const sc_lv<30> vadd_vadd::ap_ST_fsm_state20 = "100000000000000000";
const sc_lv<30> vadd_vadd::ap_ST_fsm_state21 = "1000000000000000000";
const sc_lv<30> vadd_vadd::ap_ST_fsm_pp1_stage0 = "10000000000000000000";
const sc_lv<30> vadd_vadd::ap_ST_fsm_state25 = "100000000000000000000";
const sc_lv<30> vadd_vadd::ap_ST_fsm_pp2_stage0 = "1000000000000000000000";
const sc_lv<30> vadd_vadd::ap_ST_fsm_state29 = "10000000000000000000000";
const sc_lv<30> vadd_vadd::ap_ST_fsm_state30 = "100000000000000000000000";
const sc_lv<30> vadd_vadd::ap_ST_fsm_pp3_stage0 = "1000000000000000000000000";
const sc_lv<30> vadd_vadd::ap_ST_fsm_state34 = "10000000000000000000000000";
const sc_lv<30> vadd_vadd::ap_ST_fsm_state35 = "100000000000000000000000000";
const sc_lv<30> vadd_vadd::ap_ST_fsm_state36 = "1000000000000000000000000000";
const sc_lv<30> vadd_vadd::ap_ST_fsm_state37 = "10000000000000000000000000000";
const sc_lv<30> vadd_vadd::ap_ST_fsm_state38 = "100000000000000000000000000000";
const sc_lv<32> vadd_vadd::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool vadd_vadd::ap_const_boolean_1 = true;
const sc_lv<32> vadd_vadd::ap_const_lv32_3 = "11";
const sc_lv<32> vadd_vadd::ap_const_lv32_A = "1010";
const bool vadd_vadd::ap_const_boolean_0 = false;
const sc_lv<1> vadd_vadd::ap_const_lv1_1 = "1";
const sc_lv<32> vadd_vadd::ap_const_lv32_C = "1100";
const sc_lv<32> vadd_vadd::ap_const_lv32_13 = "10011";
const sc_lv<32> vadd_vadd::ap_const_lv32_17 = "10111";
const sc_lv<32> vadd_vadd::ap_const_lv32_1D = "11101";
const sc_lv<1> vadd_vadd::ap_const_lv1_0 = "0";
const int vadd_vadd::C_S_AXI_DATA_WIDTH = "100000";
const int vadd_vadd::C_M_AXI_GMEM_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int vadd_vadd::C_M_AXI_GMEM_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int vadd_vadd::C_M_AXI_GMEM_CACHE_VALUE = "11";
const int vadd_vadd::C_M_AXI_DATA_WIDTH = "100000";
const sc_lv<32> vadd_vadd::ap_const_lv32_1 = "1";
const sc_lv<32> vadd_vadd::ap_const_lv32_2 = "10";
const sc_lv<32> vadd_vadd::ap_const_lv32_B = "1011";
const sc_lv<32> vadd_vadd::ap_const_lv32_15 = "10101";
const sc_lv<32> vadd_vadd::ap_const_lv32_16 = "10110";
const sc_lv<32> vadd_vadd::ap_const_lv32_18 = "11000";
const sc_lv<32> vadd_vadd::ap_const_lv32_19 = "11001";
const sc_lv<32> vadd_vadd::ap_const_lv32_9 = "1001";
const sc_lv<32> vadd_vadd::ap_const_lv32_12 = "10010";
const sc_lv<32> vadd_vadd::ap_const_lv32_14 = "10100";
const sc_lv<31> vadd_vadd::ap_const_lv31_0 = "0000000000000000000000000000000";
const sc_lv<3> vadd_vadd::ap_const_lv3_0 = "000";
const sc_lv<2> vadd_vadd::ap_const_lv2_0 = "00";
const sc_lv<4> vadd_vadd::ap_const_lv4_0 = "0000";
const sc_lv<4> vadd_vadd::ap_const_lv4_F = "1111";
const sc_lv<32> vadd_vadd::ap_const_lv32_3F = "111111";
const sc_lv<32> vadd_vadd::ap_const_lv32_1F = "11111";
const sc_lv<32> vadd_vadd::ap_const_lv32_3FF = "1111111111";
const sc_lv<32> vadd_vadd::ap_const_lv32_FFFFFC01 = "11111111111111111111110000000001";
const sc_lv<22> vadd_vadd::ap_const_lv22_0 = "0000000000000000000000";
const sc_lv<10> vadd_vadd::ap_const_lv10_0 = "0000000000";
const sc_lv<32> vadd_vadd::ap_const_lv32_400 = "10000000000";
const sc_lv<31> vadd_vadd::ap_const_lv31_1 = "1";

vadd_vadd::vadd_vadd(sc_module_name name) : sc_module(name), mVcdFile(0) {
    vadd_control_s_axi_U = new vadd_vadd_control_s_axi<C_S_AXI_CONTROL_ADDR_WIDTH,C_S_AXI_CONTROL_DATA_WIDTH>("vadd_control_s_axi_U");
    vadd_control_s_axi_U->AWVALID(s_axi_control_AWVALID);
    vadd_control_s_axi_U->AWREADY(s_axi_control_AWREADY);
    vadd_control_s_axi_U->AWADDR(s_axi_control_AWADDR);
    vadd_control_s_axi_U->WVALID(s_axi_control_WVALID);
    vadd_control_s_axi_U->WREADY(s_axi_control_WREADY);
    vadd_control_s_axi_U->WDATA(s_axi_control_WDATA);
    vadd_control_s_axi_U->WSTRB(s_axi_control_WSTRB);
    vadd_control_s_axi_U->ARVALID(s_axi_control_ARVALID);
    vadd_control_s_axi_U->ARREADY(s_axi_control_ARREADY);
    vadd_control_s_axi_U->ARADDR(s_axi_control_ARADDR);
    vadd_control_s_axi_U->RVALID(s_axi_control_RVALID);
    vadd_control_s_axi_U->RREADY(s_axi_control_RREADY);
    vadd_control_s_axi_U->RDATA(s_axi_control_RDATA);
    vadd_control_s_axi_U->RRESP(s_axi_control_RRESP);
    vadd_control_s_axi_U->BVALID(s_axi_control_BVALID);
    vadd_control_s_axi_U->BREADY(s_axi_control_BREADY);
    vadd_control_s_axi_U->BRESP(s_axi_control_BRESP);
    vadd_control_s_axi_U->ACLK(ap_clk);
    vadd_control_s_axi_U->ARESET(ap_rst_n_inv);
    vadd_control_s_axi_U->ACLK_EN(ap_var_for_const0);
    vadd_control_s_axi_U->ap_start(ap_start);
    vadd_control_s_axi_U->interrupt(interrupt);
    vadd_control_s_axi_U->ap_ready(ap_ready);
    vadd_control_s_axi_U->ap_done(ap_done);
    vadd_control_s_axi_U->ap_idle(ap_idle);
    vadd_control_s_axi_U->in1(in1);
    vadd_control_s_axi_U->in2(in2);
    vadd_control_s_axi_U->out_r(out_r);
    vadd_control_s_axi_U->size(size);
    vadd_gmem_m_axi_U = new vadd_vadd_gmem_m_axi<0,32,64,5,16,16,16,16,C_M_AXI_GMEM_ID_WIDTH,C_M_AXI_GMEM_ADDR_WIDTH,C_M_AXI_GMEM_DATA_WIDTH,C_M_AXI_GMEM_AWUSER_WIDTH,C_M_AXI_GMEM_ARUSER_WIDTH,C_M_AXI_GMEM_WUSER_WIDTH,C_M_AXI_GMEM_RUSER_WIDTH,C_M_AXI_GMEM_BUSER_WIDTH,C_M_AXI_GMEM_USER_VALUE,C_M_AXI_GMEM_PROT_VALUE,C_M_AXI_GMEM_CACHE_VALUE>("vadd_gmem_m_axi_U");
    vadd_gmem_m_axi_U->AWVALID(m_axi_gmem_AWVALID);
    vadd_gmem_m_axi_U->AWREADY(m_axi_gmem_AWREADY);
    vadd_gmem_m_axi_U->AWADDR(m_axi_gmem_AWADDR);
    vadd_gmem_m_axi_U->AWID(m_axi_gmem_AWID);
    vadd_gmem_m_axi_U->AWLEN(m_axi_gmem_AWLEN);
    vadd_gmem_m_axi_U->AWSIZE(m_axi_gmem_AWSIZE);
    vadd_gmem_m_axi_U->AWBURST(m_axi_gmem_AWBURST);
    vadd_gmem_m_axi_U->AWLOCK(m_axi_gmem_AWLOCK);
    vadd_gmem_m_axi_U->AWCACHE(m_axi_gmem_AWCACHE);
    vadd_gmem_m_axi_U->AWPROT(m_axi_gmem_AWPROT);
    vadd_gmem_m_axi_U->AWQOS(m_axi_gmem_AWQOS);
    vadd_gmem_m_axi_U->AWREGION(m_axi_gmem_AWREGION);
    vadd_gmem_m_axi_U->AWUSER(m_axi_gmem_AWUSER);
    vadd_gmem_m_axi_U->WVALID(m_axi_gmem_WVALID);
    vadd_gmem_m_axi_U->WREADY(m_axi_gmem_WREADY);
    vadd_gmem_m_axi_U->WDATA(m_axi_gmem_WDATA);
    vadd_gmem_m_axi_U->WSTRB(m_axi_gmem_WSTRB);
    vadd_gmem_m_axi_U->WLAST(m_axi_gmem_WLAST);
    vadd_gmem_m_axi_U->WID(m_axi_gmem_WID);
    vadd_gmem_m_axi_U->WUSER(m_axi_gmem_WUSER);
    vadd_gmem_m_axi_U->ARVALID(m_axi_gmem_ARVALID);
    vadd_gmem_m_axi_U->ARREADY(m_axi_gmem_ARREADY);
    vadd_gmem_m_axi_U->ARADDR(m_axi_gmem_ARADDR);
    vadd_gmem_m_axi_U->ARID(m_axi_gmem_ARID);
    vadd_gmem_m_axi_U->ARLEN(m_axi_gmem_ARLEN);
    vadd_gmem_m_axi_U->ARSIZE(m_axi_gmem_ARSIZE);
    vadd_gmem_m_axi_U->ARBURST(m_axi_gmem_ARBURST);
    vadd_gmem_m_axi_U->ARLOCK(m_axi_gmem_ARLOCK);
    vadd_gmem_m_axi_U->ARCACHE(m_axi_gmem_ARCACHE);
    vadd_gmem_m_axi_U->ARPROT(m_axi_gmem_ARPROT);
    vadd_gmem_m_axi_U->ARQOS(m_axi_gmem_ARQOS);
    vadd_gmem_m_axi_U->ARREGION(m_axi_gmem_ARREGION);
    vadd_gmem_m_axi_U->ARUSER(m_axi_gmem_ARUSER);
    vadd_gmem_m_axi_U->RVALID(m_axi_gmem_RVALID);
    vadd_gmem_m_axi_U->RREADY(m_axi_gmem_RREADY);
    vadd_gmem_m_axi_U->RDATA(m_axi_gmem_RDATA);
    vadd_gmem_m_axi_U->RLAST(m_axi_gmem_RLAST);
    vadd_gmem_m_axi_U->RID(m_axi_gmem_RID);
    vadd_gmem_m_axi_U->RUSER(m_axi_gmem_RUSER);
    vadd_gmem_m_axi_U->RRESP(m_axi_gmem_RRESP);
    vadd_gmem_m_axi_U->BVALID(m_axi_gmem_BVALID);
    vadd_gmem_m_axi_U->BREADY(m_axi_gmem_BREADY);
    vadd_gmem_m_axi_U->BRESP(m_axi_gmem_BRESP);
    vadd_gmem_m_axi_U->BID(m_axi_gmem_BID);
    vadd_gmem_m_axi_U->BUSER(m_axi_gmem_BUSER);
    vadd_gmem_m_axi_U->ACLK(ap_clk);
    vadd_gmem_m_axi_U->ARESET(ap_rst_n_inv);
    vadd_gmem_m_axi_U->ACLK_EN(ap_var_for_const0);
    vadd_gmem_m_axi_U->I_ARVALID(gmem_ARVALID);
    vadd_gmem_m_axi_U->I_ARREADY(gmem_ARREADY);
    vadd_gmem_m_axi_U->I_ARADDR(gmem_ARADDR);
    vadd_gmem_m_axi_U->I_ARID(ap_var_for_const1);
    vadd_gmem_m_axi_U->I_ARLEN(select_ln89_reg_617);
    vadd_gmem_m_axi_U->I_ARSIZE(ap_var_for_const2);
    vadd_gmem_m_axi_U->I_ARLOCK(ap_var_for_const3);
    vadd_gmem_m_axi_U->I_ARCACHE(ap_var_for_const4);
    vadd_gmem_m_axi_U->I_ARQOS(ap_var_for_const4);
    vadd_gmem_m_axi_U->I_ARPROT(ap_var_for_const2);
    vadd_gmem_m_axi_U->I_ARUSER(ap_var_for_const1);
    vadd_gmem_m_axi_U->I_ARBURST(ap_var_for_const3);
    vadd_gmem_m_axi_U->I_ARREGION(ap_var_for_const4);
    vadd_gmem_m_axi_U->I_RVALID(gmem_RVALID);
    vadd_gmem_m_axi_U->I_RREADY(gmem_RREADY);
    vadd_gmem_m_axi_U->I_RDATA(gmem_RDATA);
    vadd_gmem_m_axi_U->I_RID(gmem_RID);
    vadd_gmem_m_axi_U->I_RUSER(gmem_RUSER);
    vadd_gmem_m_axi_U->I_RRESP(gmem_RRESP);
    vadd_gmem_m_axi_U->I_RLAST(gmem_RLAST);
    vadd_gmem_m_axi_U->I_AWVALID(gmem_AWVALID);
    vadd_gmem_m_axi_U->I_AWREADY(gmem_AWREADY);
    vadd_gmem_m_axi_U->I_AWADDR(gmem_addr_2_reg_704);
    vadd_gmem_m_axi_U->I_AWID(ap_var_for_const1);
    vadd_gmem_m_axi_U->I_AWLEN(select_ln89_reg_617);
    vadd_gmem_m_axi_U->I_AWSIZE(ap_var_for_const2);
    vadd_gmem_m_axi_U->I_AWLOCK(ap_var_for_const3);
    vadd_gmem_m_axi_U->I_AWCACHE(ap_var_for_const4);
    vadd_gmem_m_axi_U->I_AWQOS(ap_var_for_const4);
    vadd_gmem_m_axi_U->I_AWPROT(ap_var_for_const2);
    vadd_gmem_m_axi_U->I_AWUSER(ap_var_for_const1);
    vadd_gmem_m_axi_U->I_AWBURST(ap_var_for_const3);
    vadd_gmem_m_axi_U->I_AWREGION(ap_var_for_const4);
    vadd_gmem_m_axi_U->I_WVALID(gmem_WVALID);
    vadd_gmem_m_axi_U->I_WREADY(gmem_WREADY);
    vadd_gmem_m_axi_U->I_WDATA(vout_buffer_load_reg_724);
    vadd_gmem_m_axi_U->I_WID(ap_var_for_const1);
    vadd_gmem_m_axi_U->I_WUSER(ap_var_for_const1);
    vadd_gmem_m_axi_U->I_WLAST(ap_var_for_const5);
    vadd_gmem_m_axi_U->I_WSTRB(ap_var_for_const6);
    vadd_gmem_m_axi_U->I_BVALID(gmem_BVALID);
    vadd_gmem_m_axi_U->I_BREADY(gmem_BREADY);
    vadd_gmem_m_axi_U->I_BRESP(gmem_BRESP);
    vadd_gmem_m_axi_U->I_BID(gmem_BID);
    vadd_gmem_m_axi_U->I_BUSER(gmem_BUSER);
    v1_buffer_U = new vadd_vadd_v1_buffer("v1_buffer_U");
    v1_buffer_U->clk(ap_clk);
    v1_buffer_U->reset(ap_rst_n_inv);
    v1_buffer_U->address0(v1_buffer_address0);
    v1_buffer_U->ce0(v1_buffer_ce0);
    v1_buffer_U->we0(v1_buffer_we0);
    v1_buffer_U->d0(gmem_addr_read_reg_650);
    v1_buffer_U->q0(v1_buffer_q0);
    v2_buffer_U = new vadd_vadd_v1_buffer("v2_buffer_U");
    v2_buffer_U->clk(ap_clk);
    v2_buffer_U->reset(ap_rst_n_inv);
    v2_buffer_U->address0(v2_buffer_address0);
    v2_buffer_U->ce0(v2_buffer_ce0);
    v2_buffer_U->we0(v2_buffer_we0);
    v2_buffer_U->d0(gmem_addr_1_read_reg_670);
    v2_buffer_U->q0(v2_buffer_q0);
    vout_buffer_U = new vadd_vadd_v1_buffer("vout_buffer_U");
    vout_buffer_U->clk(ap_clk);
    vout_buffer_U->reset(ap_rst_n_inv);
    vout_buffer_U->address0(vout_buffer_address0);
    vout_buffer_U->ce0(vout_buffer_ce0);
    vout_buffer_U->we0(vout_buffer_we0);
    vout_buffer_U->d0(add_ln116_reg_699);
    vout_buffer_U->q0(vout_buffer_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln101_fu_442_p2);
    sensitive << ( empty_8_reg_599 );
    sensitive << ( sext_ln101_fu_438_p1 );

    SC_METHOD(thread_add_ln107_fu_473_p2);
    sensitive << ( empty_7_reg_594 );
    sensitive << ( sext_ln101_reg_629 );

    SC_METHOD(thread_add_ln116_fu_524_p2);
    sensitive << ( v1_buffer_q0 );
    sensitive << ( v2_buffer_q0 );

    SC_METHOD(thread_add_ln123_fu_530_p2);
    sensitive << ( empty_reg_589 );
    sensitive << ( sext_ln101_reg_629 );

    SC_METHOD(thread_add_ln85_fu_341_p2);
    sensitive << ( size_read_reg_565 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp1_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp2_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp3_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state25);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state29);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state30);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state34);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state38);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln98_reg_641 );
    sensitive << ( gmem_RVALID );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln98_reg_641 );
    sensitive << ( gmem_RVALID );

    SC_METHOD(thread_ap_block_pp1_stage0);

    SC_METHOD(thread_ap_block_pp1_stage0_11001);
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( icmp_ln104_reg_661 );
    sensitive << ( gmem_RVALID );

    SC_METHOD(thread_ap_block_pp1_stage0_subdone);
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( icmp_ln104_reg_661 );
    sensitive << ( gmem_RVALID );

    SC_METHOD(thread_ap_block_pp2_stage0);

    SC_METHOD(thread_ap_block_pp2_stage0_11001);

    SC_METHOD(thread_ap_block_pp2_stage0_subdone);

    SC_METHOD(thread_ap_block_pp3_stage0);

    SC_METHOD(thread_ap_block_pp3_stage0_01001);

    SC_METHOD(thread_ap_block_pp3_stage0_11001);
    sensitive << ( ap_enable_reg_pp3_iter2 );
    sensitive << ( ap_block_state33_io );

    SC_METHOD(thread_ap_block_pp3_stage0_subdone);
    sensitive << ( ap_enable_reg_pp3_iter2 );
    sensitive << ( ap_block_state33_io );

    SC_METHOD(thread_ap_block_state11_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state12_pp0_stage0_iter1);
    sensitive << ( icmp_ln98_reg_641 );
    sensitive << ( gmem_RVALID );

    SC_METHOD(thread_ap_block_state13_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state22_pp1_stage0_iter0);

    SC_METHOD(thread_ap_block_state23_pp1_stage0_iter1);
    sensitive << ( icmp_ln104_reg_661 );
    sensitive << ( gmem_RVALID );

    SC_METHOD(thread_ap_block_state24_pp1_stage0_iter2);

    SC_METHOD(thread_ap_block_state26_pp2_stage0_iter0);

    SC_METHOD(thread_ap_block_state27_pp2_stage0_iter1);

    SC_METHOD(thread_ap_block_state28_pp2_stage0_iter2);

    SC_METHOD(thread_ap_block_state31_pp3_stage0_iter0);

    SC_METHOD(thread_ap_block_state32_pp3_stage0_iter1);

    SC_METHOD(thread_ap_block_state33_io);
    sensitive << ( icmp_ln120_reg_710_pp3_iter1_reg );
    sensitive << ( gmem_WREADY );

    SC_METHOD(thread_ap_block_state33_pp3_stage0_iter2);

    SC_METHOD(thread_ap_block_state38);
    sensitive << ( icmp_ln123_reg_729 );
    sensitive << ( gmem_BVALID );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state11);
    sensitive << ( icmp_ln98_fu_457_p2 );

    SC_METHOD(thread_ap_condition_pp1_exit_iter0_state22);
    sensitive << ( icmp_ln104_fu_487_p2 );

    SC_METHOD(thread_ap_condition_pp2_exit_iter0_state26);
    sensitive << ( icmp_ln112_fu_507_p2 );

    SC_METHOD(thread_ap_condition_pp3_exit_iter0_state31);
    sensitive << ( icmp_ln120_fu_544_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln85_fu_409_p2 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_pp1);
    sensitive << ( ap_idle_pp1 );

    SC_METHOD(thread_ap_enable_pp2);
    sensitive << ( ap_idle_pp2 );

    SC_METHOD(thread_ap_enable_pp3);
    sensitive << ( ap_idle_pp3 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_idle_pp1);
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_enable_reg_pp1_iter2 );

    SC_METHOD(thread_ap_idle_pp2);
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( ap_enable_reg_pp2_iter1 );
    sensitive << ( ap_enable_reg_pp2_iter2 );

    SC_METHOD(thread_ap_idle_pp3);
    sensitive << ( ap_enable_reg_pp3_iter2 );
    sensitive << ( ap_enable_reg_pp3_iter0 );
    sensitive << ( ap_enable_reg_pp3_iter1 );

    SC_METHOD(thread_ap_phi_mux_j1_0_phi_fu_265_p4);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( icmp_ln104_reg_661 );
    sensitive << ( j1_0_reg_261 );
    sensitive << ( j_1_reg_665 );

    SC_METHOD(thread_ap_phi_mux_j_0_phi_fu_253_p4);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln98_reg_641 );
    sensitive << ( j_0_reg_249 );
    sensitive << ( j_reg_645 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln85_fu_409_p2 );

    SC_METHOD(thread_chunk_size_fu_425_p2);
    sensitive << ( size_read_reg_565 );
    sensitive << ( i_0_reg_238 );

    SC_METHOD(thread_empty_7_fu_328_p1);
    sensitive << ( in_reg_579 );

    SC_METHOD(thread_empty_8_fu_331_p1);
    sensitive << ( in3_reg_584 );

    SC_METHOD(thread_empty_fu_325_p1);
    sensitive << ( out_r5_reg_574 );

    SC_METHOD(thread_gmem_ARADDR);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( gmem_ARREADY );
    sensitive << ( gmem_addr_reg_635 );
    sensitive << ( gmem_addr_1_reg_655 );

    SC_METHOD(thread_gmem_ARVALID);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( gmem_ARREADY );

    SC_METHOD(thread_gmem_AWVALID);
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( gmem_AWREADY );

    SC_METHOD(thread_gmem_BREADY);
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( icmp_ln123_reg_729 );
    sensitive << ( gmem_BVALID );

    SC_METHOD(thread_gmem_RREADY);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln98_reg_641 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( icmp_ln104_reg_661 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_block_pp1_stage0_11001 );

    SC_METHOD(thread_gmem_WVALID);
    sensitive << ( ap_enable_reg_pp3_iter2 );
    sensitive << ( icmp_ln120_reg_710_pp3_iter1_reg );
    sensitive << ( ap_block_pp3_stage0_11001 );

    SC_METHOD(thread_gmem_blk_n_AR);
    sensitive << ( m_axi_gmem_ARREADY );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_gmem_blk_n_AW);
    sensitive << ( m_axi_gmem_AWREADY );
    sensitive << ( ap_CS_fsm_state30 );

    SC_METHOD(thread_gmem_blk_n_B);
    sensitive << ( m_axi_gmem_BVALID );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( icmp_ln123_reg_729 );

    SC_METHOD(thread_gmem_blk_n_R);
    sensitive << ( m_axi_gmem_RVALID );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln98_reg_641 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( icmp_ln104_reg_661 );

    SC_METHOD(thread_gmem_blk_n_W);
    sensitive << ( m_axi_gmem_WREADY );
    sensitive << ( ap_enable_reg_pp3_iter2 );
    sensitive << ( ap_block_pp3_stage0 );
    sensitive << ( icmp_ln120_reg_710_pp3_iter1_reg );

    SC_METHOD(thread_i_fu_414_p2);
    sensitive << ( i_0_reg_238 );

    SC_METHOD(thread_icmp_ln104_fu_487_p2);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( select_ln89_reg_617 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( zext_ln104_fu_483_p1 );

    SC_METHOD(thread_icmp_ln112_fu_507_p2);
    sensitive << ( select_ln89_reg_617 );
    sensitive << ( ap_CS_fsm_pp2_stage0 );
    sensitive << ( ap_block_pp2_stage0_11001 );
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( zext_ln112_fu_503_p1 );

    SC_METHOD(thread_icmp_ln120_fu_544_p2);
    sensitive << ( select_ln89_reg_617 );
    sensitive << ( ap_CS_fsm_pp3_stage0 );
    sensitive << ( ap_block_pp3_stage0_11001 );
    sensitive << ( ap_enable_reg_pp3_iter0 );
    sensitive << ( zext_ln120_fu_540_p1 );

    SC_METHOD(thread_icmp_ln123_fu_560_p2);
    sensitive << ( select_ln89_reg_617 );
    sensitive << ( ap_CS_fsm_state34 );

    SC_METHOD(thread_icmp_ln85_fu_409_p2);
    sensitive << ( tmp_8_reg_604 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( i_0_reg_238 );

    SC_METHOD(thread_icmp_ln89_fu_420_p2);
    sensitive << ( size_read_reg_565 );
    sensitive << ( i_fu_414_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln85_fu_409_p2 );

    SC_METHOD(thread_icmp_ln98_fu_457_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( select_ln89_reg_617 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( zext_ln98_fu_453_p1 );

    SC_METHOD(thread_j_1_fu_492_p2);
    sensitive << ( ap_phi_mux_j1_0_phi_fu_265_p4 );

    SC_METHOD(thread_j_2_fu_512_p2);
    sensitive << ( j2_0_reg_273 );

    SC_METHOD(thread_j_3_fu_549_p2);
    sensitive << ( j3_0_reg_284 );

    SC_METHOD(thread_j_fu_462_p2);
    sensitive << ( ap_phi_mux_j_0_phi_fu_253_p4 );

    SC_METHOD(thread_p_lshr_fu_359_p4);
    sensitive << ( sub_ln85_fu_354_p2 );

    SC_METHOD(thread_select_ln85_1_fu_393_p3);
    sensitive << ( tmp_5_fu_334_p3 );
    sensitive << ( select_ln85_fu_385_p3 );

    SC_METHOD(thread_select_ln85_fu_385_p3);
    sensitive << ( tmp_6_fu_346_p3 );
    sensitive << ( sub_ln85_1_fu_369_p2 );
    sensitive << ( tmp_7_fu_375_p4 );

    SC_METHOD(thread_select_ln89_fu_430_p3);
    sensitive << ( icmp_ln89_fu_420_p2 );
    sensitive << ( chunk_size_fu_425_p2 );

    SC_METHOD(thread_sext_ln101_fu_438_p1);
    sensitive << ( i_0_reg_238 );

    SC_METHOD(thread_sub_ln85_1_fu_369_p2);
    sensitive << ( p_lshr_fu_359_p4 );

    SC_METHOD(thread_sub_ln85_fu_354_p2);
    sensitive << ( size_read_reg_565 );

    SC_METHOD(thread_tmp_5_fu_334_p3);
    sensitive << ( size_read_reg_565 );

    SC_METHOD(thread_tmp_6_fu_346_p3);
    sensitive << ( add_ln85_fu_341_p2 );

    SC_METHOD(thread_tmp_7_fu_375_p4);
    sensitive << ( add_ln85_fu_341_p2 );

    SC_METHOD(thread_tmp_8_fu_401_p3);
    sensitive << ( select_ln85_1_fu_393_p3 );

    SC_METHOD(thread_v1_buffer_address0);
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_CS_fsm_pp2_stage0 );
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( zext_ln116_fu_518_p1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( zext_ln101_fu_468_p1 );
    sensitive << ( ap_block_pp2_stage0 );

    SC_METHOD(thread_v1_buffer_ce0);
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_CS_fsm_pp2_stage0 );
    sensitive << ( ap_block_pp2_stage0_11001 );
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_v1_buffer_we0);
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( icmp_ln98_reg_641_pp0_iter1_reg );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_v2_buffer_address0);
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( ap_CS_fsm_pp2_stage0 );
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( zext_ln116_fu_518_p1 );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( zext_ln107_fu_498_p1 );
    sensitive << ( ap_block_pp2_stage0 );

    SC_METHOD(thread_v2_buffer_ce0);
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_CS_fsm_pp2_stage0 );
    sensitive << ( ap_block_pp2_stage0_11001 );
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( ap_enable_reg_pp1_iter2 );

    SC_METHOD(thread_v2_buffer_we0);
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( icmp_ln104_reg_661_pp1_iter1_reg );
    sensitive << ( ap_enable_reg_pp1_iter2 );

    SC_METHOD(thread_vout_buffer_address0);
    sensitive << ( ap_block_pp3_stage0 );
    sensitive << ( zext_ln116_reg_684_pp2_iter1_reg );
    sensitive << ( ap_CS_fsm_pp3_stage0 );
    sensitive << ( ap_enable_reg_pp3_iter0 );
    sensitive << ( ap_enable_reg_pp2_iter2 );
    sensitive << ( ap_block_pp2_stage0 );
    sensitive << ( zext_ln123_fu_555_p1 );

    SC_METHOD(thread_vout_buffer_ce0);
    sensitive << ( ap_block_pp2_stage0_11001 );
    sensitive << ( ap_CS_fsm_pp3_stage0 );
    sensitive << ( ap_block_pp3_stage0_11001 );
    sensitive << ( ap_enable_reg_pp3_iter0 );
    sensitive << ( ap_enable_reg_pp2_iter2 );

    SC_METHOD(thread_vout_buffer_we0);
    sensitive << ( ap_block_pp2_stage0_11001 );
    sensitive << ( icmp_ln112_reg_675_pp2_iter1_reg );
    sensitive << ( ap_enable_reg_pp2_iter2 );

    SC_METHOD(thread_zext_ln101_fu_468_p1);
    sensitive << ( j_0_reg_249_pp0_iter1_reg );

    SC_METHOD(thread_zext_ln104_fu_483_p1);
    sensitive << ( ap_phi_mux_j1_0_phi_fu_265_p4 );

    SC_METHOD(thread_zext_ln107_fu_498_p1);
    sensitive << ( j1_0_reg_261_pp1_iter1_reg );

    SC_METHOD(thread_zext_ln112_fu_503_p1);
    sensitive << ( j2_0_reg_273 );

    SC_METHOD(thread_zext_ln116_fu_518_p1);
    sensitive << ( j2_0_reg_273 );

    SC_METHOD(thread_zext_ln120_fu_540_p1);
    sensitive << ( j3_0_reg_284 );

    SC_METHOD(thread_zext_ln123_fu_555_p1);
    sensitive << ( j3_0_reg_284 );

    SC_METHOD(thread_zext_ln98_fu_453_p1);
    sensitive << ( ap_phi_mux_j_0_phi_fu_253_p4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_enable_reg_pp3_iter2 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( icmp_ln123_reg_729 );
    sensitive << ( gmem_AWREADY );
    sensitive << ( gmem_ARREADY );
    sensitive << ( gmem_BVALID );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln85_fu_409_p2 );
    sensitive << ( icmp_ln98_fu_457_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln104_fu_487_p2 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( icmp_ln112_fu_507_p2 );
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( icmp_ln120_fu_544_p2 );
    sensitive << ( ap_enable_reg_pp3_iter0 );
    sensitive << ( ap_enable_reg_pp3_iter1 );
    sensitive << ( icmp_ln123_fu_560_p2 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp1_stage0_subdone );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_block_pp2_stage0_subdone );
    sensitive << ( ap_enable_reg_pp2_iter1 );
    sensitive << ( ap_enable_reg_pp2_iter2 );
    sensitive << ( ap_block_pp3_stage0_subdone );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const5);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const4);

    SC_THREAD(thread_ap_var_for_const6);

    ap_rst_reg_2 = SC_LOGIC_1;
    ap_rst_reg_1 = SC_LOGIC_1;
    ap_rst_n_inv = SC_LOGIC_1;
    ap_CS_fsm = "000000000000000000000000000001";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp3_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp2_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp3_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp3_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp2_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp2_iter2 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "vadd_vadd_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, m_axi_gmem_AWVALID, "(port)m_axi_gmem_AWVALID");
    sc_trace(mVcdFile, m_axi_gmem_AWREADY, "(port)m_axi_gmem_AWREADY");
    sc_trace(mVcdFile, m_axi_gmem_AWADDR, "(port)m_axi_gmem_AWADDR");
    sc_trace(mVcdFile, m_axi_gmem_AWID, "(port)m_axi_gmem_AWID");
    sc_trace(mVcdFile, m_axi_gmem_AWLEN, "(port)m_axi_gmem_AWLEN");
    sc_trace(mVcdFile, m_axi_gmem_AWSIZE, "(port)m_axi_gmem_AWSIZE");
    sc_trace(mVcdFile, m_axi_gmem_AWBURST, "(port)m_axi_gmem_AWBURST");
    sc_trace(mVcdFile, m_axi_gmem_AWLOCK, "(port)m_axi_gmem_AWLOCK");
    sc_trace(mVcdFile, m_axi_gmem_AWCACHE, "(port)m_axi_gmem_AWCACHE");
    sc_trace(mVcdFile, m_axi_gmem_AWPROT, "(port)m_axi_gmem_AWPROT");
    sc_trace(mVcdFile, m_axi_gmem_AWQOS, "(port)m_axi_gmem_AWQOS");
    sc_trace(mVcdFile, m_axi_gmem_AWREGION, "(port)m_axi_gmem_AWREGION");
    sc_trace(mVcdFile, m_axi_gmem_AWUSER, "(port)m_axi_gmem_AWUSER");
    sc_trace(mVcdFile, m_axi_gmem_WVALID, "(port)m_axi_gmem_WVALID");
    sc_trace(mVcdFile, m_axi_gmem_WREADY, "(port)m_axi_gmem_WREADY");
    sc_trace(mVcdFile, m_axi_gmem_WDATA, "(port)m_axi_gmem_WDATA");
    sc_trace(mVcdFile, m_axi_gmem_WSTRB, "(port)m_axi_gmem_WSTRB");
    sc_trace(mVcdFile, m_axi_gmem_WLAST, "(port)m_axi_gmem_WLAST");
    sc_trace(mVcdFile, m_axi_gmem_WID, "(port)m_axi_gmem_WID");
    sc_trace(mVcdFile, m_axi_gmem_WUSER, "(port)m_axi_gmem_WUSER");
    sc_trace(mVcdFile, m_axi_gmem_ARVALID, "(port)m_axi_gmem_ARVALID");
    sc_trace(mVcdFile, m_axi_gmem_ARREADY, "(port)m_axi_gmem_ARREADY");
    sc_trace(mVcdFile, m_axi_gmem_ARADDR, "(port)m_axi_gmem_ARADDR");
    sc_trace(mVcdFile, m_axi_gmem_ARID, "(port)m_axi_gmem_ARID");
    sc_trace(mVcdFile, m_axi_gmem_ARLEN, "(port)m_axi_gmem_ARLEN");
    sc_trace(mVcdFile, m_axi_gmem_ARSIZE, "(port)m_axi_gmem_ARSIZE");
    sc_trace(mVcdFile, m_axi_gmem_ARBURST, "(port)m_axi_gmem_ARBURST");
    sc_trace(mVcdFile, m_axi_gmem_ARLOCK, "(port)m_axi_gmem_ARLOCK");
    sc_trace(mVcdFile, m_axi_gmem_ARCACHE, "(port)m_axi_gmem_ARCACHE");
    sc_trace(mVcdFile, m_axi_gmem_ARPROT, "(port)m_axi_gmem_ARPROT");
    sc_trace(mVcdFile, m_axi_gmem_ARQOS, "(port)m_axi_gmem_ARQOS");
    sc_trace(mVcdFile, m_axi_gmem_ARREGION, "(port)m_axi_gmem_ARREGION");
    sc_trace(mVcdFile, m_axi_gmem_ARUSER, "(port)m_axi_gmem_ARUSER");
    sc_trace(mVcdFile, m_axi_gmem_RVALID, "(port)m_axi_gmem_RVALID");
    sc_trace(mVcdFile, m_axi_gmem_RREADY, "(port)m_axi_gmem_RREADY");
    sc_trace(mVcdFile, m_axi_gmem_RDATA, "(port)m_axi_gmem_RDATA");
    sc_trace(mVcdFile, m_axi_gmem_RLAST, "(port)m_axi_gmem_RLAST");
    sc_trace(mVcdFile, m_axi_gmem_RID, "(port)m_axi_gmem_RID");
    sc_trace(mVcdFile, m_axi_gmem_RUSER, "(port)m_axi_gmem_RUSER");
    sc_trace(mVcdFile, m_axi_gmem_RRESP, "(port)m_axi_gmem_RRESP");
    sc_trace(mVcdFile, m_axi_gmem_BVALID, "(port)m_axi_gmem_BVALID");
    sc_trace(mVcdFile, m_axi_gmem_BREADY, "(port)m_axi_gmem_BREADY");
    sc_trace(mVcdFile, m_axi_gmem_BRESP, "(port)m_axi_gmem_BRESP");
    sc_trace(mVcdFile, m_axi_gmem_BID, "(port)m_axi_gmem_BID");
    sc_trace(mVcdFile, m_axi_gmem_BUSER, "(port)m_axi_gmem_BUSER");
    sc_trace(mVcdFile, s_axi_control_AWVALID, "(port)s_axi_control_AWVALID");
    sc_trace(mVcdFile, s_axi_control_AWREADY, "(port)s_axi_control_AWREADY");
    sc_trace(mVcdFile, s_axi_control_AWADDR, "(port)s_axi_control_AWADDR");
    sc_trace(mVcdFile, s_axi_control_WVALID, "(port)s_axi_control_WVALID");
    sc_trace(mVcdFile, s_axi_control_WREADY, "(port)s_axi_control_WREADY");
    sc_trace(mVcdFile, s_axi_control_WDATA, "(port)s_axi_control_WDATA");
    sc_trace(mVcdFile, s_axi_control_WSTRB, "(port)s_axi_control_WSTRB");
    sc_trace(mVcdFile, s_axi_control_ARVALID, "(port)s_axi_control_ARVALID");
    sc_trace(mVcdFile, s_axi_control_ARREADY, "(port)s_axi_control_ARREADY");
    sc_trace(mVcdFile, s_axi_control_ARADDR, "(port)s_axi_control_ARADDR");
    sc_trace(mVcdFile, s_axi_control_RVALID, "(port)s_axi_control_RVALID");
    sc_trace(mVcdFile, s_axi_control_RREADY, "(port)s_axi_control_RREADY");
    sc_trace(mVcdFile, s_axi_control_RDATA, "(port)s_axi_control_RDATA");
    sc_trace(mVcdFile, s_axi_control_RRESP, "(port)s_axi_control_RRESP");
    sc_trace(mVcdFile, s_axi_control_BVALID, "(port)s_axi_control_BVALID");
    sc_trace(mVcdFile, s_axi_control_BREADY, "(port)s_axi_control_BREADY");
    sc_trace(mVcdFile, s_axi_control_BRESP, "(port)s_axi_control_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_reg_2, "ap_rst_reg_2");
    sc_trace(mVcdFile, ap_rst_reg_1, "ap_rst_reg_1");
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, in1, "in1");
    sc_trace(mVcdFile, in2, "in2");
    sc_trace(mVcdFile, out_r, "out_r");
    sc_trace(mVcdFile, size, "size");
    sc_trace(mVcdFile, gmem_blk_n_AR, "gmem_blk_n_AR");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, gmem_blk_n_R, "gmem_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, icmp_ln98_reg_641, "icmp_ln98_reg_641");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, ap_CS_fsm_pp1_stage0, "ap_CS_fsm_pp1_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter1, "ap_enable_reg_pp1_iter1");
    sc_trace(mVcdFile, ap_block_pp1_stage0, "ap_block_pp1_stage0");
    sc_trace(mVcdFile, icmp_ln104_reg_661, "icmp_ln104_reg_661");
    sc_trace(mVcdFile, gmem_blk_n_AW, "gmem_blk_n_AW");
    sc_trace(mVcdFile, ap_CS_fsm_state30, "ap_CS_fsm_state30");
    sc_trace(mVcdFile, gmem_blk_n_W, "gmem_blk_n_W");
    sc_trace(mVcdFile, ap_enable_reg_pp3_iter2, "ap_enable_reg_pp3_iter2");
    sc_trace(mVcdFile, ap_block_pp3_stage0, "ap_block_pp3_stage0");
    sc_trace(mVcdFile, icmp_ln120_reg_710, "icmp_ln120_reg_710");
    sc_trace(mVcdFile, icmp_ln120_reg_710_pp3_iter1_reg, "icmp_ln120_reg_710_pp3_iter1_reg");
    sc_trace(mVcdFile, gmem_blk_n_B, "gmem_blk_n_B");
    sc_trace(mVcdFile, ap_CS_fsm_state38, "ap_CS_fsm_state38");
    sc_trace(mVcdFile, icmp_ln123_reg_729, "icmp_ln123_reg_729");
    sc_trace(mVcdFile, gmem_AWVALID, "gmem_AWVALID");
    sc_trace(mVcdFile, gmem_AWREADY, "gmem_AWREADY");
    sc_trace(mVcdFile, gmem_WVALID, "gmem_WVALID");
    sc_trace(mVcdFile, gmem_WREADY, "gmem_WREADY");
    sc_trace(mVcdFile, gmem_ARVALID, "gmem_ARVALID");
    sc_trace(mVcdFile, gmem_ARREADY, "gmem_ARREADY");
    sc_trace(mVcdFile, gmem_ARADDR, "gmem_ARADDR");
    sc_trace(mVcdFile, gmem_RVALID, "gmem_RVALID");
    sc_trace(mVcdFile, gmem_RREADY, "gmem_RREADY");
    sc_trace(mVcdFile, gmem_RDATA, "gmem_RDATA");
    sc_trace(mVcdFile, gmem_RLAST, "gmem_RLAST");
    sc_trace(mVcdFile, gmem_RID, "gmem_RID");
    sc_trace(mVcdFile, gmem_RUSER, "gmem_RUSER");
    sc_trace(mVcdFile, gmem_RRESP, "gmem_RRESP");
    sc_trace(mVcdFile, gmem_BVALID, "gmem_BVALID");
    sc_trace(mVcdFile, gmem_BREADY, "gmem_BREADY");
    sc_trace(mVcdFile, gmem_BRESP, "gmem_BRESP");
    sc_trace(mVcdFile, gmem_BID, "gmem_BID");
    sc_trace(mVcdFile, gmem_BUSER, "gmem_BUSER");
    sc_trace(mVcdFile, j_0_reg_249, "j_0_reg_249");
    sc_trace(mVcdFile, j_0_reg_249_pp0_iter1_reg, "j_0_reg_249_pp0_iter1_reg");
    sc_trace(mVcdFile, ap_block_state11_pp0_stage0_iter0, "ap_block_state11_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state12_pp0_stage0_iter1, "ap_block_state12_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state13_pp0_stage0_iter2, "ap_block_state13_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, j1_0_reg_261, "j1_0_reg_261");
    sc_trace(mVcdFile, j1_0_reg_261_pp1_iter1_reg, "j1_0_reg_261_pp1_iter1_reg");
    sc_trace(mVcdFile, ap_block_state22_pp1_stage0_iter0, "ap_block_state22_pp1_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state23_pp1_stage0_iter1, "ap_block_state23_pp1_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state24_pp1_stage0_iter2, "ap_block_state24_pp1_stage0_iter2");
    sc_trace(mVcdFile, ap_block_pp1_stage0_11001, "ap_block_pp1_stage0_11001");
    sc_trace(mVcdFile, j2_0_reg_273, "j2_0_reg_273");
    sc_trace(mVcdFile, j3_0_reg_284, "j3_0_reg_284");
    sc_trace(mVcdFile, size_read_reg_565, "size_read_reg_565");
    sc_trace(mVcdFile, out_r5_reg_574, "out_r5_reg_574");
    sc_trace(mVcdFile, in_reg_579, "in_reg_579");
    sc_trace(mVcdFile, in3_reg_584, "in3_reg_584");
    sc_trace(mVcdFile, empty_fu_325_p1, "empty_fu_325_p1");
    sc_trace(mVcdFile, empty_reg_589, "empty_reg_589");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, empty_7_fu_328_p1, "empty_7_fu_328_p1");
    sc_trace(mVcdFile, empty_7_reg_594, "empty_7_reg_594");
    sc_trace(mVcdFile, empty_8_fu_331_p1, "empty_8_fu_331_p1");
    sc_trace(mVcdFile, empty_8_reg_599, "empty_8_reg_599");
    sc_trace(mVcdFile, tmp_8_fu_401_p3, "tmp_8_fu_401_p3");
    sc_trace(mVcdFile, tmp_8_reg_604, "tmp_8_reg_604");
    sc_trace(mVcdFile, i_fu_414_p2, "i_fu_414_p2");
    sc_trace(mVcdFile, i_reg_612, "i_reg_612");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, icmp_ln85_fu_409_p2, "icmp_ln85_fu_409_p2");
    sc_trace(mVcdFile, select_ln89_fu_430_p3, "select_ln89_fu_430_p3");
    sc_trace(mVcdFile, select_ln89_reg_617, "select_ln89_reg_617");
    sc_trace(mVcdFile, sext_ln101_fu_438_p1, "sext_ln101_fu_438_p1");
    sc_trace(mVcdFile, sext_ln101_reg_629, "sext_ln101_reg_629");
    sc_trace(mVcdFile, gmem_addr_reg_635, "gmem_addr_reg_635");
    sc_trace(mVcdFile, icmp_ln98_fu_457_p2, "icmp_ln98_fu_457_p2");
    sc_trace(mVcdFile, icmp_ln98_reg_641_pp0_iter1_reg, "icmp_ln98_reg_641_pp0_iter1_reg");
    sc_trace(mVcdFile, j_fu_462_p2, "j_fu_462_p2");
    sc_trace(mVcdFile, j_reg_645, "j_reg_645");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, gmem_addr_read_reg_650, "gmem_addr_read_reg_650");
    sc_trace(mVcdFile, gmem_addr_1_reg_655, "gmem_addr_1_reg_655");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, icmp_ln104_fu_487_p2, "icmp_ln104_fu_487_p2");
    sc_trace(mVcdFile, icmp_ln104_reg_661_pp1_iter1_reg, "icmp_ln104_reg_661_pp1_iter1_reg");
    sc_trace(mVcdFile, j_1_fu_492_p2, "j_1_fu_492_p2");
    sc_trace(mVcdFile, j_1_reg_665, "j_1_reg_665");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter0, "ap_enable_reg_pp1_iter0");
    sc_trace(mVcdFile, gmem_addr_1_read_reg_670, "gmem_addr_1_read_reg_670");
    sc_trace(mVcdFile, icmp_ln112_fu_507_p2, "icmp_ln112_fu_507_p2");
    sc_trace(mVcdFile, icmp_ln112_reg_675, "icmp_ln112_reg_675");
    sc_trace(mVcdFile, ap_CS_fsm_pp2_stage0, "ap_CS_fsm_pp2_stage0");
    sc_trace(mVcdFile, ap_block_state26_pp2_stage0_iter0, "ap_block_state26_pp2_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state27_pp2_stage0_iter1, "ap_block_state27_pp2_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state28_pp2_stage0_iter2, "ap_block_state28_pp2_stage0_iter2");
    sc_trace(mVcdFile, ap_block_pp2_stage0_11001, "ap_block_pp2_stage0_11001");
    sc_trace(mVcdFile, icmp_ln112_reg_675_pp2_iter1_reg, "icmp_ln112_reg_675_pp2_iter1_reg");
    sc_trace(mVcdFile, j_2_fu_512_p2, "j_2_fu_512_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp2_iter0, "ap_enable_reg_pp2_iter0");
    sc_trace(mVcdFile, zext_ln116_fu_518_p1, "zext_ln116_fu_518_p1");
    sc_trace(mVcdFile, zext_ln116_reg_684, "zext_ln116_reg_684");
    sc_trace(mVcdFile, zext_ln116_reg_684_pp2_iter1_reg, "zext_ln116_reg_684_pp2_iter1_reg");
    sc_trace(mVcdFile, add_ln116_fu_524_p2, "add_ln116_fu_524_p2");
    sc_trace(mVcdFile, add_ln116_reg_699, "add_ln116_reg_699");
    sc_trace(mVcdFile, gmem_addr_2_reg_704, "gmem_addr_2_reg_704");
    sc_trace(mVcdFile, ap_CS_fsm_state29, "ap_CS_fsm_state29");
    sc_trace(mVcdFile, icmp_ln120_fu_544_p2, "icmp_ln120_fu_544_p2");
    sc_trace(mVcdFile, ap_CS_fsm_pp3_stage0, "ap_CS_fsm_pp3_stage0");
    sc_trace(mVcdFile, ap_block_state31_pp3_stage0_iter0, "ap_block_state31_pp3_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state32_pp3_stage0_iter1, "ap_block_state32_pp3_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state33_pp3_stage0_iter2, "ap_block_state33_pp3_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state33_io, "ap_block_state33_io");
    sc_trace(mVcdFile, ap_block_pp3_stage0_11001, "ap_block_pp3_stage0_11001");
    sc_trace(mVcdFile, j_3_fu_549_p2, "j_3_fu_549_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp3_iter0, "ap_enable_reg_pp3_iter0");
    sc_trace(mVcdFile, vout_buffer_q0, "vout_buffer_q0");
    sc_trace(mVcdFile, vout_buffer_load_reg_724, "vout_buffer_load_reg_724");
    sc_trace(mVcdFile, ap_enable_reg_pp3_iter1, "ap_enable_reg_pp3_iter1");
    sc_trace(mVcdFile, icmp_ln123_fu_560_p2, "icmp_ln123_fu_560_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state34, "ap_CS_fsm_state34");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state11, "ap_condition_pp0_exit_iter0_state11");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, ap_block_pp1_stage0_subdone, "ap_block_pp1_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp1_exit_iter0_state22, "ap_condition_pp1_exit_iter0_state22");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter2, "ap_enable_reg_pp1_iter2");
    sc_trace(mVcdFile, ap_CS_fsm_state25, "ap_CS_fsm_state25");
    sc_trace(mVcdFile, ap_block_pp2_stage0_subdone, "ap_block_pp2_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp2_exit_iter0_state26, "ap_condition_pp2_exit_iter0_state26");
    sc_trace(mVcdFile, ap_enable_reg_pp2_iter1, "ap_enable_reg_pp2_iter1");
    sc_trace(mVcdFile, ap_enable_reg_pp2_iter2, "ap_enable_reg_pp2_iter2");
    sc_trace(mVcdFile, ap_block_pp3_stage0_subdone, "ap_block_pp3_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp3_exit_iter0_state31, "ap_condition_pp3_exit_iter0_state31");
    sc_trace(mVcdFile, v1_buffer_address0, "v1_buffer_address0");
    sc_trace(mVcdFile, v1_buffer_ce0, "v1_buffer_ce0");
    sc_trace(mVcdFile, v1_buffer_we0, "v1_buffer_we0");
    sc_trace(mVcdFile, v1_buffer_q0, "v1_buffer_q0");
    sc_trace(mVcdFile, v2_buffer_address0, "v2_buffer_address0");
    sc_trace(mVcdFile, v2_buffer_ce0, "v2_buffer_ce0");
    sc_trace(mVcdFile, v2_buffer_we0, "v2_buffer_we0");
    sc_trace(mVcdFile, v2_buffer_q0, "v2_buffer_q0");
    sc_trace(mVcdFile, vout_buffer_address0, "vout_buffer_address0");
    sc_trace(mVcdFile, vout_buffer_ce0, "vout_buffer_ce0");
    sc_trace(mVcdFile, vout_buffer_we0, "vout_buffer_we0");
    sc_trace(mVcdFile, i_0_reg_238, "i_0_reg_238");
    sc_trace(mVcdFile, ap_block_state38, "ap_block_state38");
    sc_trace(mVcdFile, ap_phi_mux_j_0_phi_fu_253_p4, "ap_phi_mux_j_0_phi_fu_253_p4");
    sc_trace(mVcdFile, ap_phi_mux_j1_0_phi_fu_265_p4, "ap_phi_mux_j1_0_phi_fu_265_p4");
    sc_trace(mVcdFile, zext_ln101_fu_468_p1, "zext_ln101_fu_468_p1");
    sc_trace(mVcdFile, zext_ln107_fu_498_p1, "zext_ln107_fu_498_p1");
    sc_trace(mVcdFile, ap_block_pp2_stage0, "ap_block_pp2_stage0");
    sc_trace(mVcdFile, zext_ln123_fu_555_p1, "zext_ln123_fu_555_p1");
    sc_trace(mVcdFile, add_ln101_fu_442_p2, "add_ln101_fu_442_p2");
    sc_trace(mVcdFile, add_ln107_fu_473_p2, "add_ln107_fu_473_p2");
    sc_trace(mVcdFile, add_ln123_fu_530_p2, "add_ln123_fu_530_p2");
    sc_trace(mVcdFile, ap_block_pp3_stage0_01001, "ap_block_pp3_stage0_01001");
    sc_trace(mVcdFile, add_ln85_fu_341_p2, "add_ln85_fu_341_p2");
    sc_trace(mVcdFile, sub_ln85_fu_354_p2, "sub_ln85_fu_354_p2");
    sc_trace(mVcdFile, p_lshr_fu_359_p4, "p_lshr_fu_359_p4");
    sc_trace(mVcdFile, tmp_6_fu_346_p3, "tmp_6_fu_346_p3");
    sc_trace(mVcdFile, sub_ln85_1_fu_369_p2, "sub_ln85_1_fu_369_p2");
    sc_trace(mVcdFile, tmp_7_fu_375_p4, "tmp_7_fu_375_p4");
    sc_trace(mVcdFile, tmp_5_fu_334_p3, "tmp_5_fu_334_p3");
    sc_trace(mVcdFile, select_ln85_fu_385_p3, "select_ln85_fu_385_p3");
    sc_trace(mVcdFile, select_ln85_1_fu_393_p3, "select_ln85_1_fu_393_p3");
    sc_trace(mVcdFile, icmp_ln89_fu_420_p2, "icmp_ln89_fu_420_p2");
    sc_trace(mVcdFile, chunk_size_fu_425_p2, "chunk_size_fu_425_p2");
    sc_trace(mVcdFile, zext_ln98_fu_453_p1, "zext_ln98_fu_453_p1");
    sc_trace(mVcdFile, zext_ln104_fu_483_p1, "zext_ln104_fu_483_p1");
    sc_trace(mVcdFile, zext_ln112_fu_503_p1, "zext_ln112_fu_503_p1");
    sc_trace(mVcdFile, zext_ln120_fu_540_p1, "zext_ln120_fu_540_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_idle_pp1, "ap_idle_pp1");
    sc_trace(mVcdFile, ap_enable_pp1, "ap_enable_pp1");
    sc_trace(mVcdFile, ap_idle_pp2, "ap_idle_pp2");
    sc_trace(mVcdFile, ap_enable_pp2, "ap_enable_pp2");
    sc_trace(mVcdFile, ap_idle_pp3, "ap_idle_pp3");
    sc_trace(mVcdFile, ap_enable_pp3, "ap_enable_pp3");
#endif

    }
    mHdltvinHandle.open("vadd_vadd.hdltvin.dat");
    mHdltvoutHandle.open("vadd_vadd.hdltvout.dat");
}

vadd_vadd::~vadd_vadd() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete vadd_control_s_axi_U;
    delete vadd_gmem_m_axi_U;
    delete v1_buffer_U;
    delete v2_buffer_U;
    delete vout_buffer_U;
}

void vadd_vadd::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void vadd_vadd::thread_ap_var_for_const5() {
    ap_var_for_const5 = ap_const_logic_0;
}

void vadd_vadd::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv1_0;
}

void vadd_vadd::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv3_0;
}

void vadd_vadd::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv2_0;
}

void vadd_vadd::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv4_0;
}

void vadd_vadd::thread_ap_var_for_const6() {
    ap_var_for_const6 = ap_const_lv4_F;
}

void vadd_vadd::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state11.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state11.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state11.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
            ap_enable_reg_pp0_iter2 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp1_exit_iter0_state22.read()))) {
            ap_enable_reg_pp1_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
            ap_enable_reg_pp1_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp1_exit_iter0_state22.read())) {
                ap_enable_reg_pp1_iter1 = (ap_condition_pp1_exit_iter0_state22.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp1_iter1 = ap_enable_reg_pp1_iter0.read();
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp1_iter2 = ap_enable_reg_pp1_iter1.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
            ap_enable_reg_pp1_iter2 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp2_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp2_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp2_exit_iter0_state26.read()))) {
            ap_enable_reg_pp2_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
            ap_enable_reg_pp2_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp2_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp2_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp2_exit_iter0_state26.read())) {
                ap_enable_reg_pp2_iter1 = (ap_condition_pp2_exit_iter0_state26.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp2_iter1 = ap_enable_reg_pp2_iter0.read();
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp2_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp2_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp2_iter2 = ap_enable_reg_pp2_iter1.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
            ap_enable_reg_pp2_iter2 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp3_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp3_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp3_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp3_exit_iter0_state31.read()))) {
            ap_enable_reg_pp3_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) && 
                    esl_seteq<1,1,1>(gmem_AWREADY.read(), ap_const_logic_1))) {
            ap_enable_reg_pp3_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp3_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp3_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp3_exit_iter0_state31.read())) {
                ap_enable_reg_pp3_iter1 = (ap_condition_pp3_exit_iter0_state31.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp3_iter1 = ap_enable_reg_pp3_iter0.read();
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp3_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp3_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp3_iter2 = ap_enable_reg_pp3_iter1.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) && 
                    esl_seteq<1,1,1>(gmem_AWREADY.read(), ap_const_logic_1))) {
            ap_enable_reg_pp3_iter2 = ap_const_logic_0;
        }
    }
    ap_rst_n_inv = ap_rst_reg_1.read();
    ap_rst_reg_1 = ap_rst_reg_2.read();
    ap_rst_reg_2 =  (sc_logic) (~ap_rst_n.read());
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) && 
         !(esl_seteq<1,1,1>(icmp_ln123_reg_729.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, gmem_BVALID.read())))) {
        i_0_reg_238 = i_reg_612.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_0_reg_238 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        j1_0_reg_261 = ap_const_lv31_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln104_reg_661.read()) && 
                esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0))) {
        j1_0_reg_261 = j_1_reg_665.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        j2_0_reg_273 = ap_const_lv31_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln112_fu_507_p2.read()))) {
        j2_0_reg_273 = j_2_fu_512_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) && 
         esl_seteq<1,1,1>(gmem_AWREADY.read(), ap_const_logic_1))) {
        j3_0_reg_284 = ap_const_lv31_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp3_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp3_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp3_iter0.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln120_fu_544_p2.read()))) {
        j3_0_reg_284 = j_3_fu_549_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln98_reg_641.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        j_0_reg_249 = j_reg_645.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        j_0_reg_249 = ap_const_lv31_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln112_reg_675.read()))) {
        add_ln116_reg_699 = add_ln116_fu_524_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        empty_7_reg_594 = empty_7_fu_328_p1.read();
        empty_8_reg_599 = empty_8_fu_331_p1.read();
        empty_reg_589 = empty_fu_325_p1.read();
        tmp_8_reg_604 = tmp_8_fu_401_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln104_reg_661.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0))) {
        gmem_addr_1_read_reg_670 = gmem_RDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        gmem_addr_1_reg_655 = add_ln107_fu_473_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read())) {
        gmem_addr_2_reg_704 = add_ln123_fu_530_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(icmp_ln98_reg_641.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        gmem_addr_read_reg_650 = gmem_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln85_fu_409_p2.read()))) {
        gmem_addr_reg_635 = add_ln101_fu_442_p2.read();
        i_reg_612 = i_fu_414_p2.read();
        select_ln89_reg_617 = select_ln89_fu_430_p3.read();
        sext_ln101_reg_629 = sext_ln101_fu_438_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln104_reg_661 = icmp_ln104_fu_487_p2.read();
        icmp_ln104_reg_661_pp1_iter1_reg = icmp_ln104_reg_661.read();
        j1_0_reg_261_pp1_iter1_reg = j1_0_reg_261.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln112_reg_675 = icmp_ln112_fu_507_p2.read();
        icmp_ln112_reg_675_pp2_iter1_reg = icmp_ln112_reg_675.read();
        zext_ln116_reg_684_pp2_iter1_reg = zext_ln116_reg_684.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp3_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp3_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln120_reg_710 = icmp_ln120_fu_544_p2.read();
        icmp_ln120_reg_710_pp3_iter1_reg = icmp_ln120_reg_710.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read())) {
        icmp_ln123_reg_729 = icmp_ln123_fu_560_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln98_reg_641 = icmp_ln98_fu_457_p2.read();
        icmp_ln98_reg_641_pp0_iter1_reg = icmp_ln98_reg_641.read();
        j_0_reg_249_pp0_iter1_reg = j_0_reg_249.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        in3_reg_584 = in1.read().range(63, 2);
        in_reg_579 = in2.read().range(63, 2);
        out_r5_reg_574 = out_r.read().range(63, 2);
        size_read_reg_565 = size.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()))) {
        j_1_reg_665 = j_1_fu_492_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        j_reg_645 = j_fu_462_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp3_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp3_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp3_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln120_reg_710.read()))) {
        vout_buffer_load_reg_724 = vout_buffer_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln112_fu_507_p2.read()))) {
        zext_ln116_reg_684 = zext_ln116_fu_518_p1.read();
    }
}

void vadd_vadd::thread_add_ln101_fu_442_p2() {
    add_ln101_fu_442_p2 = (!empty_8_reg_599.read().is_01() || !sext_ln101_fu_438_p1.read().is_01())? sc_lv<64>(): (sc_biguint<64>(empty_8_reg_599.read()) + sc_bigint<64>(sext_ln101_fu_438_p1.read()));
}

void vadd_vadd::thread_add_ln107_fu_473_p2() {
    add_ln107_fu_473_p2 = (!empty_7_reg_594.read().is_01() || !sext_ln101_reg_629.read().is_01())? sc_lv<64>(): (sc_biguint<64>(empty_7_reg_594.read()) + sc_bigint<64>(sext_ln101_reg_629.read()));
}

void vadd_vadd::thread_add_ln116_fu_524_p2() {
    add_ln116_fu_524_p2 = (!v1_buffer_q0.read().is_01() || !v2_buffer_q0.read().is_01())? sc_lv<32>(): (sc_biguint<32>(v1_buffer_q0.read()) + sc_biguint<32>(v2_buffer_q0.read()));
}

void vadd_vadd::thread_add_ln123_fu_530_p2() {
    add_ln123_fu_530_p2 = (!empty_reg_589.read().is_01() || !sext_ln101_reg_629.read().is_01())? sc_lv<64>(): (sc_biguint<64>(empty_reg_589.read()) + sc_bigint<64>(sext_ln101_reg_629.read()));
}

void vadd_vadd::thread_add_ln85_fu_341_p2() {
    add_ln85_fu_341_p2 = (!size_read_reg_565.read().is_01() || !ap_const_lv32_3FF.is_01())? sc_lv<32>(): (sc_biguint<32>(size_read_reg_565.read()) + sc_biguint<32>(ap_const_lv32_3FF));
}

void vadd_vadd::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[10];
}

void vadd_vadd::thread_ap_CS_fsm_pp1_stage0() {
    ap_CS_fsm_pp1_stage0 = ap_CS_fsm.read()[19];
}

void vadd_vadd::thread_ap_CS_fsm_pp2_stage0() {
    ap_CS_fsm_pp2_stage0 = ap_CS_fsm.read()[21];
}

void vadd_vadd::thread_ap_CS_fsm_pp3_stage0() {
    ap_CS_fsm_pp3_stage0 = ap_CS_fsm.read()[24];
}

void vadd_vadd::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void vadd_vadd::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void vadd_vadd::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[11];
}

void vadd_vadd::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[12];
}

void vadd_vadd::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void vadd_vadd::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read()[18];
}

void vadd_vadd::thread_ap_CS_fsm_state25() {
    ap_CS_fsm_state25 = ap_CS_fsm.read()[20];
}

void vadd_vadd::thread_ap_CS_fsm_state29() {
    ap_CS_fsm_state29 = ap_CS_fsm.read()[22];
}

void vadd_vadd::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void vadd_vadd::thread_ap_CS_fsm_state30() {
    ap_CS_fsm_state30 = ap_CS_fsm.read()[23];
}

void vadd_vadd::thread_ap_CS_fsm_state34() {
    ap_CS_fsm_state34 = ap_CS_fsm.read()[25];
}

void vadd_vadd::thread_ap_CS_fsm_state38() {
    ap_CS_fsm_state38 = ap_CS_fsm.read()[29];
}

void vadd_vadd::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void vadd_vadd::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void vadd_vadd::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(icmp_ln98_reg_641.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read()));
}

void vadd_vadd::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(icmp_ln98_reg_641.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read()));
}

void vadd_vadd::thread_ap_block_pp1_stage0() {
    ap_block_pp1_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void vadd_vadd::thread_ap_block_pp1_stage0_11001() {
    ap_block_pp1_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln104_reg_661.read()) && esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read()));
}

void vadd_vadd::thread_ap_block_pp1_stage0_subdone() {
    ap_block_pp1_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln104_reg_661.read()) && esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read()));
}

void vadd_vadd::thread_ap_block_pp2_stage0() {
    ap_block_pp2_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void vadd_vadd::thread_ap_block_pp2_stage0_11001() {
    ap_block_pp2_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void vadd_vadd::thread_ap_block_pp2_stage0_subdone() {
    ap_block_pp2_stage0_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void vadd_vadd::thread_ap_block_pp3_stage0() {
    ap_block_pp3_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void vadd_vadd::thread_ap_block_pp3_stage0_01001() {
    ap_block_pp3_stage0_01001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void vadd_vadd::thread_ap_block_pp3_stage0_11001() {
    ap_block_pp3_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp3_iter2.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state33_io.read()));
}

void vadd_vadd::thread_ap_block_pp3_stage0_subdone() {
    ap_block_pp3_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp3_iter2.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state33_io.read()));
}

void vadd_vadd::thread_ap_block_state11_pp0_stage0_iter0() {
    ap_block_state11_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void vadd_vadd::thread_ap_block_state12_pp0_stage0_iter1() {
    ap_block_state12_pp0_stage0_iter1 = (esl_seteq<1,1,1>(icmp_ln98_reg_641.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read()));
}

void vadd_vadd::thread_ap_block_state13_pp0_stage0_iter2() {
    ap_block_state13_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void vadd_vadd::thread_ap_block_state22_pp1_stage0_iter0() {
    ap_block_state22_pp1_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void vadd_vadd::thread_ap_block_state23_pp1_stage0_iter1() {
    ap_block_state23_pp1_stage0_iter1 = (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln104_reg_661.read()) && esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read()));
}

void vadd_vadd::thread_ap_block_state24_pp1_stage0_iter2() {
    ap_block_state24_pp1_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void vadd_vadd::thread_ap_block_state26_pp2_stage0_iter0() {
    ap_block_state26_pp2_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void vadd_vadd::thread_ap_block_state27_pp2_stage0_iter1() {
    ap_block_state27_pp2_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void vadd_vadd::thread_ap_block_state28_pp2_stage0_iter2() {
    ap_block_state28_pp2_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void vadd_vadd::thread_ap_block_state31_pp3_stage0_iter0() {
    ap_block_state31_pp3_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void vadd_vadd::thread_ap_block_state32_pp3_stage0_iter1() {
    ap_block_state32_pp3_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void vadd_vadd::thread_ap_block_state33_io() {
    ap_block_state33_io = (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln120_reg_710_pp3_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, gmem_WREADY.read()));
}

void vadd_vadd::thread_ap_block_state33_pp3_stage0_iter2() {
    ap_block_state33_pp3_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void vadd_vadd::thread_ap_block_state38() {
    ap_block_state38 = (esl_seteq<1,1,1>(icmp_ln123_reg_729.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, gmem_BVALID.read()));
}

void vadd_vadd::thread_ap_condition_pp0_exit_iter0_state11() {
    if (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln98_fu_457_p2.read())) {
        ap_condition_pp0_exit_iter0_state11 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state11 = ap_const_logic_0;
    }
}

void vadd_vadd::thread_ap_condition_pp1_exit_iter0_state22() {
    if (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln104_fu_487_p2.read())) {
        ap_condition_pp1_exit_iter0_state22 = ap_const_logic_1;
    } else {
        ap_condition_pp1_exit_iter0_state22 = ap_const_logic_0;
    }
}

void vadd_vadd::thread_ap_condition_pp2_exit_iter0_state26() {
    if (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln112_fu_507_p2.read())) {
        ap_condition_pp2_exit_iter0_state26 = ap_const_logic_1;
    } else {
        ap_condition_pp2_exit_iter0_state26 = ap_const_logic_0;
    }
}

void vadd_vadd::thread_ap_condition_pp3_exit_iter0_state31() {
    if (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln120_fu_544_p2.read())) {
        ap_condition_pp3_exit_iter0_state31 = ap_const_logic_1;
    } else {
        ap_condition_pp3_exit_iter0_state31 = ap_const_logic_0;
    }
}

void vadd_vadd::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln85_fu_409_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void vadd_vadd::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void vadd_vadd::thread_ap_enable_pp1() {
    ap_enable_pp1 = (ap_idle_pp1.read() ^ ap_const_logic_1);
}

void vadd_vadd::thread_ap_enable_pp2() {
    ap_enable_pp2 = (ap_idle_pp2.read() ^ ap_const_logic_1);
}

void vadd_vadd::thread_ap_enable_pp3() {
    ap_enable_pp3 = (ap_idle_pp3.read() ^ ap_const_logic_1);
}

void vadd_vadd::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void vadd_vadd::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void vadd_vadd::thread_ap_idle_pp1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter2.read()))) {
        ap_idle_pp1 = ap_const_logic_1;
    } else {
        ap_idle_pp1 = ap_const_logic_0;
    }
}

void vadd_vadd::thread_ap_idle_pp2() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp2_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp2_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp2_iter2.read()))) {
        ap_idle_pp2 = ap_const_logic_1;
    } else {
        ap_idle_pp2 = ap_const_logic_0;
    }
}

void vadd_vadd::thread_ap_idle_pp3() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp3_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp3_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp3_iter2.read()))) {
        ap_idle_pp3 = ap_const_logic_1;
    } else {
        ap_idle_pp3 = ap_const_logic_0;
    }
}

void vadd_vadd::thread_ap_phi_mux_j1_0_phi_fu_265_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln104_reg_661.read()))) {
        ap_phi_mux_j1_0_phi_fu_265_p4 = j_1_reg_665.read();
    } else {
        ap_phi_mux_j1_0_phi_fu_265_p4 = j1_0_reg_261.read();
    }
}

void vadd_vadd::thread_ap_phi_mux_j_0_phi_fu_253_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln98_reg_641.read(), ap_const_lv1_1))) {
        ap_phi_mux_j_0_phi_fu_253_p4 = j_reg_645.read();
    } else {
        ap_phi_mux_j_0_phi_fu_253_p4 = j_0_reg_249.read();
    }
}

void vadd_vadd::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln85_fu_409_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void vadd_vadd::thread_chunk_size_fu_425_p2() {
    chunk_size_fu_425_p2 = (!size_read_reg_565.read().is_01() || !i_0_reg_238.read().is_01())? sc_lv<32>(): (sc_biguint<32>(size_read_reg_565.read()) - sc_bigint<32>(i_0_reg_238.read()));
}

void vadd_vadd::thread_empty_7_fu_328_p1() {
    empty_7_fu_328_p1 = esl_zext<64,62>(in_reg_579.read());
}

void vadd_vadd::thread_empty_8_fu_331_p1() {
    empty_8_fu_331_p1 = esl_zext<64,62>(in3_reg_584.read());
}

void vadd_vadd::thread_empty_fu_325_p1() {
    empty_fu_325_p1 = esl_zext<64,62>(out_r5_reg_574.read());
}

void vadd_vadd::thread_gmem_ARADDR() {
    if (esl_seteq<1,1,1>(gmem_ARREADY.read(), ap_const_logic_1)) {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
            gmem_ARADDR = gmem_addr_1_reg_655.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
            gmem_ARADDR = gmem_addr_reg_635.read();
        } else {
            gmem_ARADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        gmem_ARADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void vadd_vadd::thread_gmem_ARVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(gmem_ARREADY.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
          esl_seteq<1,1,1>(gmem_ARREADY.read(), ap_const_logic_1)))) {
        gmem_ARVALID = ap_const_logic_1;
    } else {
        gmem_ARVALID = ap_const_logic_0;
    }
}

void vadd_vadd::thread_gmem_AWVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) && 
         esl_seteq<1,1,1>(gmem_AWREADY.read(), ap_const_logic_1))) {
        gmem_AWVALID = ap_const_logic_1;
    } else {
        gmem_AWVALID = ap_const_logic_0;
    }
}

void vadd_vadd::thread_gmem_BREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) && 
         esl_seteq<1,1,1>(icmp_ln123_reg_729.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(icmp_ln123_reg_729.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, gmem_BVALID.read())))) {
        gmem_BREADY = ap_const_logic_1;
    } else {
        gmem_BREADY = ap_const_logic_0;
    }
}

void vadd_vadd::thread_gmem_RREADY() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(icmp_ln98_reg_641.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln104_reg_661.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0)))) {
        gmem_RREADY = ap_const_logic_1;
    } else {
        gmem_RREADY = ap_const_logic_0;
    }
}

void vadd_vadd::thread_gmem_WVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp3_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln120_reg_710_pp3_iter1_reg.read()) && 
         esl_seteq<1,1,1>(ap_block_pp3_stage0_11001.read(), ap_const_boolean_0))) {
        gmem_WVALID = ap_const_logic_1;
    } else {
        gmem_WVALID = ap_const_logic_0;
    }
}

void vadd_vadd::thread_gmem_blk_n_AR() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        gmem_blk_n_AR = m_axi_gmem_ARREADY.read();
    } else {
        gmem_blk_n_AR = ap_const_logic_1;
    }
}

void vadd_vadd::thread_gmem_blk_n_AW() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        gmem_blk_n_AW = m_axi_gmem_AWREADY.read();
    } else {
        gmem_blk_n_AW = ap_const_logic_1;
    }
}

void vadd_vadd::thread_gmem_blk_n_B() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) && 
         esl_seteq<1,1,1>(icmp_ln123_reg_729.read(), ap_const_lv1_0))) {
        gmem_blk_n_B = m_axi_gmem_BVALID.read();
    } else {
        gmem_blk_n_B = ap_const_logic_1;
    }
}

void vadd_vadd::thread_gmem_blk_n_R() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(icmp_ln98_reg_641.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln104_reg_661.read())))) {
        gmem_blk_n_R = m_axi_gmem_RVALID.read();
    } else {
        gmem_blk_n_R = ap_const_logic_1;
    }
}

void vadd_vadd::thread_gmem_blk_n_W() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp3_iter2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp3_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln120_reg_710_pp3_iter1_reg.read()))) {
        gmem_blk_n_W = m_axi_gmem_WREADY.read();
    } else {
        gmem_blk_n_W = ap_const_logic_1;
    }
}

void vadd_vadd::thread_i_fu_414_p2() {
    i_fu_414_p2 = (!i_0_reg_238.read().is_01() || !ap_const_lv32_400.is_01())? sc_lv<32>(): (sc_bigint<32>(i_0_reg_238.read()) + sc_biguint<32>(ap_const_lv32_400));
}

void vadd_vadd::thread_icmp_ln104_fu_487_p2() {
    icmp_ln104_fu_487_p2 = (!zext_ln104_fu_483_p1.read().is_01() || !select_ln89_reg_617.read().is_01())? sc_lv<1>(): (sc_bigint<32>(zext_ln104_fu_483_p1.read()) < sc_bigint<32>(select_ln89_reg_617.read()));
}

void vadd_vadd::thread_icmp_ln112_fu_507_p2() {
    icmp_ln112_fu_507_p2 = (!zext_ln112_fu_503_p1.read().is_01() || !select_ln89_reg_617.read().is_01())? sc_lv<1>(): (sc_bigint<32>(zext_ln112_fu_503_p1.read()) < sc_bigint<32>(select_ln89_reg_617.read()));
}

void vadd_vadd::thread_icmp_ln120_fu_544_p2() {
    icmp_ln120_fu_544_p2 = (!zext_ln120_fu_540_p1.read().is_01() || !select_ln89_reg_617.read().is_01())? sc_lv<1>(): (sc_bigint<32>(zext_ln120_fu_540_p1.read()) < sc_bigint<32>(select_ln89_reg_617.read()));
}

void vadd_vadd::thread_icmp_ln123_fu_560_p2() {
    icmp_ln123_fu_560_p2 = (!select_ln89_reg_617.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(select_ln89_reg_617.read() == ap_const_lv32_0);
}

void vadd_vadd::thread_icmp_ln85_fu_409_p2() {
    icmp_ln85_fu_409_p2 = (!i_0_reg_238.read().is_01() || !tmp_8_reg_604.read().is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_238.read() == tmp_8_reg_604.read());
}

void vadd_vadd::thread_icmp_ln89_fu_420_p2() {
    icmp_ln89_fu_420_p2 = (!i_fu_414_p2.read().is_01() || !size_read_reg_565.read().is_01())? sc_lv<1>(): (sc_bigint<32>(i_fu_414_p2.read()) > sc_bigint<32>(size_read_reg_565.read()));
}

void vadd_vadd::thread_icmp_ln98_fu_457_p2() {
    icmp_ln98_fu_457_p2 = (!zext_ln98_fu_453_p1.read().is_01() || !select_ln89_reg_617.read().is_01())? sc_lv<1>(): (sc_bigint<32>(zext_ln98_fu_453_p1.read()) < sc_bigint<32>(select_ln89_reg_617.read()));
}

void vadd_vadd::thread_j_1_fu_492_p2() {
    j_1_fu_492_p2 = (!ap_phi_mux_j1_0_phi_fu_265_p4.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(ap_phi_mux_j1_0_phi_fu_265_p4.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void vadd_vadd::thread_j_2_fu_512_p2() {
    j_2_fu_512_p2 = (!j2_0_reg_273.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(j2_0_reg_273.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void vadd_vadd::thread_j_3_fu_549_p2() {
    j_3_fu_549_p2 = (!j3_0_reg_284.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(j3_0_reg_284.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void vadd_vadd::thread_j_fu_462_p2() {
    j_fu_462_p2 = (!ap_phi_mux_j_0_phi_fu_253_p4.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(ap_phi_mux_j_0_phi_fu_253_p4.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void vadd_vadd::thread_p_lshr_fu_359_p4() {
    p_lshr_fu_359_p4 = sub_ln85_fu_354_p2.read().range(31, 10);
}

void vadd_vadd::thread_select_ln85_1_fu_393_p3() {
    select_ln85_1_fu_393_p3 = (!tmp_5_fu_334_p3.read()[0].is_01())? sc_lv<22>(): ((tmp_5_fu_334_p3.read()[0].to_bool())? ap_const_lv22_0: select_ln85_fu_385_p3.read());
}

void vadd_vadd::thread_select_ln85_fu_385_p3() {
    select_ln85_fu_385_p3 = (!tmp_6_fu_346_p3.read()[0].is_01())? sc_lv<22>(): ((tmp_6_fu_346_p3.read()[0].to_bool())? sub_ln85_1_fu_369_p2.read(): tmp_7_fu_375_p4.read());
}

void vadd_vadd::thread_select_ln89_fu_430_p3() {
    select_ln89_fu_430_p3 = (!icmp_ln89_fu_420_p2.read()[0].is_01())? sc_lv<32>(): ((icmp_ln89_fu_420_p2.read()[0].to_bool())? chunk_size_fu_425_p2.read(): ap_const_lv32_400);
}

void vadd_vadd::thread_sext_ln101_fu_438_p1() {
    sext_ln101_fu_438_p1 = esl_sext<64,32>(i_0_reg_238.read());
}

void vadd_vadd::thread_sub_ln85_1_fu_369_p2() {
    sub_ln85_1_fu_369_p2 = (!ap_const_lv22_0.is_01() || !p_lshr_fu_359_p4.read().is_01())? sc_lv<22>(): (sc_biguint<22>(ap_const_lv22_0) - sc_biguint<22>(p_lshr_fu_359_p4.read()));
}

void vadd_vadd::thread_sub_ln85_fu_354_p2() {
    sub_ln85_fu_354_p2 = (!ap_const_lv32_FFFFFC01.is_01() || !size_read_reg_565.read().is_01())? sc_lv<32>(): (sc_bigint<32>(ap_const_lv32_FFFFFC01) - sc_biguint<32>(size_read_reg_565.read()));
}

void vadd_vadd::thread_tmp_5_fu_334_p3() {
    tmp_5_fu_334_p3 = size_read_reg_565.read().range(31, 31);
}

void vadd_vadd::thread_tmp_6_fu_346_p3() {
    tmp_6_fu_346_p3 = add_ln85_fu_341_p2.read().range(31, 31);
}

void vadd_vadd::thread_tmp_7_fu_375_p4() {
    tmp_7_fu_375_p4 = add_ln85_fu_341_p2.read().range(31, 10);
}

void vadd_vadd::thread_tmp_8_fu_401_p3() {
    tmp_8_fu_401_p3 = esl_concat<22,10>(select_ln85_1_fu_393_p3.read(), ap_const_lv10_0);
}

void vadd_vadd::thread_v1_buffer_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp2_stage0.read(), ap_const_boolean_0))) {
        v1_buffer_address0 =  (sc_lv<10>) (zext_ln116_fu_518_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()))) {
        v1_buffer_address0 =  (sc_lv<10>) (zext_ln101_fu_468_p1.read());
    } else {
        v1_buffer_address0 =  (sc_lv<10>) ("XXXXXXXXXX");
    }
}

void vadd_vadd::thread_v1_buffer_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read())) || 
         (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read())))) {
        v1_buffer_ce0 = ap_const_logic_1;
    } else {
        v1_buffer_ce0 = ap_const_logic_0;
    }
}

void vadd_vadd::thread_v1_buffer_we0() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln98_reg_641_pp0_iter1_reg.read()))) {
        v1_buffer_we0 = ap_const_logic_1;
    } else {
        v1_buffer_we0 = ap_const_logic_0;
    }
}

void vadd_vadd::thread_v2_buffer_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp2_stage0.read(), ap_const_boolean_0))) {
        v2_buffer_address0 =  (sc_lv<10>) (zext_ln116_fu_518_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()))) {
        v2_buffer_address0 =  (sc_lv<10>) (zext_ln107_fu_498_p1.read());
    } else {
        v2_buffer_address0 =  (sc_lv<10>) ("XXXXXXXXXX");
    }
}

void vadd_vadd::thread_v2_buffer_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read())) || 
         (esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read())))) {
        v2_buffer_ce0 = ap_const_logic_1;
    } else {
        v2_buffer_ce0 = ap_const_logic_0;
    }
}

void vadd_vadd::thread_v2_buffer_we0() {
    if ((esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln104_reg_661_pp1_iter1_reg.read()))) {
        v2_buffer_we0 = ap_const_logic_1;
    } else {
        v2_buffer_we0 = ap_const_logic_0;
    }
}

void vadd_vadd::thread_vout_buffer_address0() {
    if ((esl_seteq<1,1,1>(ap_block_pp3_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp3_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp3_iter0.read()))) {
        vout_buffer_address0 =  (sc_lv<10>) (zext_ln123_fu_555_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_block_pp2_stage0.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter2.read()))) {
        vout_buffer_address0 =  (sc_lv<10>) (zext_ln116_reg_684_pp2_iter1_reg.read());
    } else {
        vout_buffer_address0 =  (sc_lv<10>) ("XXXXXXXXXX");
    }
}

void vadd_vadd::thread_vout_buffer_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp3_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp3_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp3_iter0.read())) || 
         (esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter2.read())))) {
        vout_buffer_ce0 = ap_const_logic_1;
    } else {
        vout_buffer_ce0 = ap_const_logic_0;
    }
}

void vadd_vadd::thread_vout_buffer_we0() {
    if ((esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln112_reg_675_pp2_iter1_reg.read()))) {
        vout_buffer_we0 = ap_const_logic_1;
    } else {
        vout_buffer_we0 = ap_const_logic_0;
    }
}

void vadd_vadd::thread_zext_ln101_fu_468_p1() {
    zext_ln101_fu_468_p1 = esl_zext<64,31>(j_0_reg_249_pp0_iter1_reg.read());
}

void vadd_vadd::thread_zext_ln104_fu_483_p1() {
    zext_ln104_fu_483_p1 = esl_zext<32,31>(ap_phi_mux_j1_0_phi_fu_265_p4.read());
}

void vadd_vadd::thread_zext_ln107_fu_498_p1() {
    zext_ln107_fu_498_p1 = esl_zext<64,31>(j1_0_reg_261_pp1_iter1_reg.read());
}

void vadd_vadd::thread_zext_ln112_fu_503_p1() {
    zext_ln112_fu_503_p1 = esl_zext<32,31>(j2_0_reg_273.read());
}

void vadd_vadd::thread_zext_ln116_fu_518_p1() {
    zext_ln116_fu_518_p1 = esl_zext<64,31>(j2_0_reg_273.read());
}

void vadd_vadd::thread_zext_ln120_fu_540_p1() {
    zext_ln120_fu_540_p1 = esl_zext<32,31>(j3_0_reg_284.read());
}

void vadd_vadd::thread_zext_ln123_fu_555_p1() {
    zext_ln123_fu_555_p1 = esl_zext<64,31>(j3_0_reg_284.read());
}

void vadd_vadd::thread_zext_ln98_fu_453_p1() {
    zext_ln98_fu_453_p1 = esl_zext<32,31>(ap_phi_mux_j_0_phi_fu_253_p4.read());
}

void vadd_vadd::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln85_fu_409_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(gmem_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            break;
        case 1024 : 
            if ((!(esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln98_fu_457_p2.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln98_fu_457_p2.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state14;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 4096 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && esl_seteq<1,1,1>(gmem_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state16;
            } else {
                ap_NS_fsm = ap_ST_fsm_state15;
            }
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            break;
        case 524288 : 
            if ((!(esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp1_iter1.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln104_fu_487_p2.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp1_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            } else if (((esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp1_iter1.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln104_fu_487_p2.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp1_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state25;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            }
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            break;
        case 2097152 : 
            if ((!(esl_seteq<1,1,1>(ap_block_pp2_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter2.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp2_iter1.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp2_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln112_fu_507_p2.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp2_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            } else if (((esl_seteq<1,1,1>(ap_block_pp2_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter2.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp2_iter1.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp2_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln112_fu_507_p2.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp2_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state29;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            }
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 8388608 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) && esl_seteq<1,1,1>(gmem_AWREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state30;
            }
            break;
        case 16777216 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp3_iter2.read()) && esl_seteq<1,1,1>(ap_block_pp3_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp3_iter1.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp3_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp3_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln120_fu_544_p2.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp3_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp3_iter2.read()) && 
  esl_seteq<1,1,1>(ap_block_pp3_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp3_iter1.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp3_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp3_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln120_fu_544_p2.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp3_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state34;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            }
            break;
        case 33554432 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln123_fu_560_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state38;
            } else {
                ap_NS_fsm = ap_ST_fsm_state35;
            }
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state36;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state37;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state38;
            break;
        case 536870912 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) && !(esl_seteq<1,1,1>(icmp_ln123_reg_729.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, gmem_BVALID.read())))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state38;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<30>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void vadd_vadd::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"m_axi_gmem_AWVALID\" :  \"" << m_axi_gmem_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_AWREADY\" :  \"" << m_axi_gmem_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWADDR\" :  \"" << m_axi_gmem_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWID\" :  \"" << m_axi_gmem_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWLEN\" :  \"" << m_axi_gmem_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWSIZE\" :  \"" << m_axi_gmem_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWBURST\" :  \"" << m_axi_gmem_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWLOCK\" :  \"" << m_axi_gmem_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWCACHE\" :  \"" << m_axi_gmem_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWPROT\" :  \"" << m_axi_gmem_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWQOS\" :  \"" << m_axi_gmem_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWREGION\" :  \"" << m_axi_gmem_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWUSER\" :  \"" << m_axi_gmem_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WVALID\" :  \"" << m_axi_gmem_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_WREADY\" :  \"" << m_axi_gmem_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WDATA\" :  \"" << m_axi_gmem_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WSTRB\" :  \"" << m_axi_gmem_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WLAST\" :  \"" << m_axi_gmem_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WID\" :  \"" << m_axi_gmem_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WUSER\" :  \"" << m_axi_gmem_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARVALID\" :  \"" << m_axi_gmem_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_ARREADY\" :  \"" << m_axi_gmem_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARADDR\" :  \"" << m_axi_gmem_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARID\" :  \"" << m_axi_gmem_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARLEN\" :  \"" << m_axi_gmem_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARSIZE\" :  \"" << m_axi_gmem_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARBURST\" :  \"" << m_axi_gmem_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARLOCK\" :  \"" << m_axi_gmem_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARCACHE\" :  \"" << m_axi_gmem_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARPROT\" :  \"" << m_axi_gmem_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARQOS\" :  \"" << m_axi_gmem_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARREGION\" :  \"" << m_axi_gmem_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARUSER\" :  \"" << m_axi_gmem_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RVALID\" :  \"" << m_axi_gmem_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_RREADY\" :  \"" << m_axi_gmem_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RDATA\" :  \"" << m_axi_gmem_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RLAST\" :  \"" << m_axi_gmem_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RID\" :  \"" << m_axi_gmem_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RUSER\" :  \"" << m_axi_gmem_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RRESP\" :  \"" << m_axi_gmem_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BVALID\" :  \"" << m_axi_gmem_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_BREADY\" :  \"" << m_axi_gmem_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BRESP\" :  \"" << m_axi_gmem_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BID\" :  \"" << m_axi_gmem_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BUSER\" :  \"" << m_axi_gmem_BUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_AWVALID\" :  \"" << s_axi_control_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_AWREADY\" :  \"" << s_axi_control_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_AWADDR\" :  \"" << s_axi_control_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_WVALID\" :  \"" << s_axi_control_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_WREADY\" :  \"" << s_axi_control_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_WDATA\" :  \"" << s_axi_control_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_WSTRB\" :  \"" << s_axi_control_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_ARVALID\" :  \"" << s_axi_control_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_ARREADY\" :  \"" << s_axi_control_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_ARADDR\" :  \"" << s_axi_control_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_RVALID\" :  \"" << s_axi_control_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_RREADY\" :  \"" << s_axi_control_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_RDATA\" :  \"" << s_axi_control_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_RRESP\" :  \"" << s_axi_control_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_BVALID\" :  \"" << s_axi_control_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_BREADY\" :  \"" << s_axi_control_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_BRESP\" :  \"" << s_axi_control_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

