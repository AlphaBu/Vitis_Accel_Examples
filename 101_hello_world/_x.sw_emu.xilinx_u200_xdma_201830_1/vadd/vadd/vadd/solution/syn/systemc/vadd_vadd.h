// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _vadd_vadd_HH_
#define _vadd_vadd_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "vadd_vadd_v1_buffer.h"
#include "vadd_vadd_control_s_axi.h"
#include "vadd_vadd_gmem_m_axi.h"

namespace ap_rtl {

template<unsigned int C_M_AXI_GMEM_ADDR_WIDTH = 64,
         unsigned int C_M_AXI_GMEM_ID_WIDTH = 1,
         unsigned int C_M_AXI_GMEM_AWUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEM_DATA_WIDTH = 32,
         unsigned int C_M_AXI_GMEM_WUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEM_ARUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEM_RUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEM_BUSER_WIDTH = 1,
         unsigned int C_S_AXI_CONTROL_ADDR_WIDTH = 6,
         unsigned int C_S_AXI_CONTROL_DATA_WIDTH = 32>
struct vadd_vadd : public sc_module {
    // Port declarations 65
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_logic > m_axi_gmem_AWVALID;
    sc_in< sc_logic > m_axi_gmem_AWREADY;
    sc_out< sc_uint<C_M_AXI_GMEM_ADDR_WIDTH> > m_axi_gmem_AWADDR;
    sc_out< sc_uint<C_M_AXI_GMEM_ID_WIDTH> > m_axi_gmem_AWID;
    sc_out< sc_lv<8> > m_axi_gmem_AWLEN;
    sc_out< sc_lv<3> > m_axi_gmem_AWSIZE;
    sc_out< sc_lv<2> > m_axi_gmem_AWBURST;
    sc_out< sc_lv<2> > m_axi_gmem_AWLOCK;
    sc_out< sc_lv<4> > m_axi_gmem_AWCACHE;
    sc_out< sc_lv<3> > m_axi_gmem_AWPROT;
    sc_out< sc_lv<4> > m_axi_gmem_AWQOS;
    sc_out< sc_lv<4> > m_axi_gmem_AWREGION;
    sc_out< sc_uint<C_M_AXI_GMEM_AWUSER_WIDTH> > m_axi_gmem_AWUSER;
    sc_out< sc_logic > m_axi_gmem_WVALID;
    sc_in< sc_logic > m_axi_gmem_WREADY;
    sc_out< sc_uint<C_M_AXI_GMEM_DATA_WIDTH> > m_axi_gmem_WDATA;
    sc_out< sc_uint<C_M_AXI_GMEM_DATA_WIDTH/8> > m_axi_gmem_WSTRB;
    sc_out< sc_logic > m_axi_gmem_WLAST;
    sc_out< sc_uint<C_M_AXI_GMEM_ID_WIDTH> > m_axi_gmem_WID;
    sc_out< sc_uint<C_M_AXI_GMEM_WUSER_WIDTH> > m_axi_gmem_WUSER;
    sc_out< sc_logic > m_axi_gmem_ARVALID;
    sc_in< sc_logic > m_axi_gmem_ARREADY;
    sc_out< sc_uint<C_M_AXI_GMEM_ADDR_WIDTH> > m_axi_gmem_ARADDR;
    sc_out< sc_uint<C_M_AXI_GMEM_ID_WIDTH> > m_axi_gmem_ARID;
    sc_out< sc_lv<8> > m_axi_gmem_ARLEN;
    sc_out< sc_lv<3> > m_axi_gmem_ARSIZE;
    sc_out< sc_lv<2> > m_axi_gmem_ARBURST;
    sc_out< sc_lv<2> > m_axi_gmem_ARLOCK;
    sc_out< sc_lv<4> > m_axi_gmem_ARCACHE;
    sc_out< sc_lv<3> > m_axi_gmem_ARPROT;
    sc_out< sc_lv<4> > m_axi_gmem_ARQOS;
    sc_out< sc_lv<4> > m_axi_gmem_ARREGION;
    sc_out< sc_uint<C_M_AXI_GMEM_ARUSER_WIDTH> > m_axi_gmem_ARUSER;
    sc_in< sc_logic > m_axi_gmem_RVALID;
    sc_out< sc_logic > m_axi_gmem_RREADY;
    sc_in< sc_uint<C_M_AXI_GMEM_DATA_WIDTH> > m_axi_gmem_RDATA;
    sc_in< sc_logic > m_axi_gmem_RLAST;
    sc_in< sc_uint<C_M_AXI_GMEM_ID_WIDTH> > m_axi_gmem_RID;
    sc_in< sc_uint<C_M_AXI_GMEM_RUSER_WIDTH> > m_axi_gmem_RUSER;
    sc_in< sc_lv<2> > m_axi_gmem_RRESP;
    sc_in< sc_logic > m_axi_gmem_BVALID;
    sc_out< sc_logic > m_axi_gmem_BREADY;
    sc_in< sc_lv<2> > m_axi_gmem_BRESP;
    sc_in< sc_uint<C_M_AXI_GMEM_ID_WIDTH> > m_axi_gmem_BID;
    sc_in< sc_uint<C_M_AXI_GMEM_BUSER_WIDTH> > m_axi_gmem_BUSER;
    sc_in< sc_logic > s_axi_control_AWVALID;
    sc_out< sc_logic > s_axi_control_AWREADY;
    sc_in< sc_uint<C_S_AXI_CONTROL_ADDR_WIDTH> > s_axi_control_AWADDR;
    sc_in< sc_logic > s_axi_control_WVALID;
    sc_out< sc_logic > s_axi_control_WREADY;
    sc_in< sc_uint<C_S_AXI_CONTROL_DATA_WIDTH> > s_axi_control_WDATA;
    sc_in< sc_uint<C_S_AXI_CONTROL_DATA_WIDTH/8> > s_axi_control_WSTRB;
    sc_in< sc_logic > s_axi_control_ARVALID;
    sc_out< sc_logic > s_axi_control_ARREADY;
    sc_in< sc_uint<C_S_AXI_CONTROL_ADDR_WIDTH> > s_axi_control_ARADDR;
    sc_out< sc_logic > s_axi_control_RVALID;
    sc_in< sc_logic > s_axi_control_RREADY;
    sc_out< sc_uint<C_S_AXI_CONTROL_DATA_WIDTH> > s_axi_control_RDATA;
    sc_out< sc_lv<2> > s_axi_control_RRESP;
    sc_out< sc_logic > s_axi_control_BVALID;
    sc_in< sc_logic > s_axi_control_BREADY;
    sc_out< sc_lv<2> > s_axi_control_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_logic > ap_var_for_const5;
    sc_signal< sc_lv<1> > ap_var_for_const1;
    sc_signal< sc_lv<3> > ap_var_for_const2;
    sc_signal< sc_lv<2> > ap_var_for_const3;
    sc_signal< sc_lv<4> > ap_var_for_const4;
    sc_signal< sc_lv<4> > ap_var_for_const6;


    // Module declarations
    vadd_vadd(sc_module_name name);
    SC_HAS_PROCESS(vadd_vadd);

    ~vadd_vadd();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    vadd_vadd_control_s_axi<C_S_AXI_CONTROL_ADDR_WIDTH,C_S_AXI_CONTROL_DATA_WIDTH>* vadd_control_s_axi_U;
    vadd_vadd_gmem_m_axi<0,32,64,5,16,16,16,16,C_M_AXI_GMEM_ID_WIDTH,C_M_AXI_GMEM_ADDR_WIDTH,C_M_AXI_GMEM_DATA_WIDTH,C_M_AXI_GMEM_AWUSER_WIDTH,C_M_AXI_GMEM_ARUSER_WIDTH,C_M_AXI_GMEM_WUSER_WIDTH,C_M_AXI_GMEM_RUSER_WIDTH,C_M_AXI_GMEM_BUSER_WIDTH,C_M_AXI_GMEM_USER_VALUE,C_M_AXI_GMEM_PROT_VALUE,C_M_AXI_GMEM_CACHE_VALUE>* vadd_gmem_m_axi_U;
    vadd_vadd_v1_buffer* v1_buffer_U;
    vadd_vadd_v1_buffer* v2_buffer_U;
    vadd_vadd_v1_buffer* vout_buffer_U;
    sc_signal< sc_logic > ap_rst_reg_2;
    sc_signal< sc_logic > ap_rst_reg_1;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<30> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<64> > in1;
    sc_signal< sc_lv<64> > in2;
    sc_signal< sc_lv<64> > out_r;
    sc_signal< sc_lv<32> > size;
    sc_signal< sc_logic > gmem_blk_n_AR;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_logic > gmem_blk_n_R;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln98_reg_641;
    sc_signal< sc_logic > ap_CS_fsm_state15;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter1;
    sc_signal< bool > ap_block_pp1_stage0;
    sc_signal< sc_lv<1> > icmp_ln104_reg_661;
    sc_signal< sc_logic > gmem_blk_n_AW;
    sc_signal< sc_logic > ap_CS_fsm_state30;
    sc_signal< sc_logic > gmem_blk_n_W;
    sc_signal< sc_logic > ap_enable_reg_pp3_iter2;
    sc_signal< bool > ap_block_pp3_stage0;
    sc_signal< sc_lv<1> > icmp_ln120_reg_710;
    sc_signal< sc_lv<1> > icmp_ln120_reg_710_pp3_iter1_reg;
    sc_signal< sc_logic > gmem_blk_n_B;
    sc_signal< sc_logic > ap_CS_fsm_state38;
    sc_signal< sc_lv<1> > icmp_ln123_reg_729;
    sc_signal< sc_logic > gmem_AWVALID;
    sc_signal< sc_logic > gmem_AWREADY;
    sc_signal< sc_logic > gmem_WVALID;
    sc_signal< sc_logic > gmem_WREADY;
    sc_signal< sc_logic > gmem_ARVALID;
    sc_signal< sc_logic > gmem_ARREADY;
    sc_signal< sc_lv<64> > gmem_ARADDR;
    sc_signal< sc_logic > gmem_RVALID;
    sc_signal< sc_logic > gmem_RREADY;
    sc_signal< sc_lv<32> > gmem_RDATA;
    sc_signal< sc_logic > gmem_RLAST;
    sc_signal< sc_lv<1> > gmem_RID;
    sc_signal< sc_lv<1> > gmem_RUSER;
    sc_signal< sc_lv<2> > gmem_RRESP;
    sc_signal< sc_logic > gmem_BVALID;
    sc_signal< sc_logic > gmem_BREADY;
    sc_signal< sc_lv<2> > gmem_BRESP;
    sc_signal< sc_lv<1> > gmem_BID;
    sc_signal< sc_lv<1> > gmem_BUSER;
    sc_signal< sc_lv<31> > j_0_reg_249;
    sc_signal< sc_lv<31> > j_0_reg_249_pp0_iter1_reg;
    sc_signal< bool > ap_block_state11_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state12_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state13_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<31> > j1_0_reg_261;
    sc_signal< sc_lv<31> > j1_0_reg_261_pp1_iter1_reg;
    sc_signal< bool > ap_block_state22_pp1_stage0_iter0;
    sc_signal< bool > ap_block_state23_pp1_stage0_iter1;
    sc_signal< bool > ap_block_state24_pp1_stage0_iter2;
    sc_signal< bool > ap_block_pp1_stage0_11001;
    sc_signal< sc_lv<31> > j2_0_reg_273;
    sc_signal< sc_lv<31> > j3_0_reg_284;
    sc_signal< sc_lv<32> > size_read_reg_565;
    sc_signal< sc_lv<62> > out_r5_reg_574;
    sc_signal< sc_lv<62> > in_reg_579;
    sc_signal< sc_lv<62> > in3_reg_584;
    sc_signal< sc_lv<64> > empty_fu_325_p1;
    sc_signal< sc_lv<64> > empty_reg_589;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<64> > empty_7_fu_328_p1;
    sc_signal< sc_lv<64> > empty_7_reg_594;
    sc_signal< sc_lv<64> > empty_8_fu_331_p1;
    sc_signal< sc_lv<64> > empty_8_reg_599;
    sc_signal< sc_lv<32> > tmp_8_fu_401_p3;
    sc_signal< sc_lv<32> > tmp_8_reg_604;
    sc_signal< sc_lv<32> > i_fu_414_p2;
    sc_signal< sc_lv<32> > i_reg_612;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > icmp_ln85_fu_409_p2;
    sc_signal< sc_lv<32> > select_ln89_fu_430_p3;
    sc_signal< sc_lv<32> > select_ln89_reg_617;
    sc_signal< sc_lv<64> > sext_ln101_fu_438_p1;
    sc_signal< sc_lv<64> > sext_ln101_reg_629;
    sc_signal< sc_lv<64> > gmem_addr_reg_635;
    sc_signal< sc_lv<1> > icmp_ln98_fu_457_p2;
    sc_signal< sc_lv<1> > icmp_ln98_reg_641_pp0_iter1_reg;
    sc_signal< sc_lv<31> > j_fu_462_p2;
    sc_signal< sc_lv<31> > j_reg_645;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<32> > gmem_addr_read_reg_650;
    sc_signal< sc_lv<64> > gmem_addr_1_reg_655;
    sc_signal< sc_logic > ap_CS_fsm_state14;
    sc_signal< sc_lv<1> > icmp_ln104_fu_487_p2;
    sc_signal< sc_lv<1> > icmp_ln104_reg_661_pp1_iter1_reg;
    sc_signal< sc_lv<31> > j_1_fu_492_p2;
    sc_signal< sc_lv<31> > j_1_reg_665;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter0;
    sc_signal< sc_lv<32> > gmem_addr_1_read_reg_670;
    sc_signal< sc_lv<1> > icmp_ln112_fu_507_p2;
    sc_signal< sc_lv<1> > icmp_ln112_reg_675;
    sc_signal< sc_logic > ap_CS_fsm_pp2_stage0;
    sc_signal< bool > ap_block_state26_pp2_stage0_iter0;
    sc_signal< bool > ap_block_state27_pp2_stage0_iter1;
    sc_signal< bool > ap_block_state28_pp2_stage0_iter2;
    sc_signal< bool > ap_block_pp2_stage0_11001;
    sc_signal< sc_lv<1> > icmp_ln112_reg_675_pp2_iter1_reg;
    sc_signal< sc_lv<31> > j_2_fu_512_p2;
    sc_signal< sc_logic > ap_enable_reg_pp2_iter0;
    sc_signal< sc_lv<64> > zext_ln116_fu_518_p1;
    sc_signal< sc_lv<64> > zext_ln116_reg_684;
    sc_signal< sc_lv<64> > zext_ln116_reg_684_pp2_iter1_reg;
    sc_signal< sc_lv<32> > add_ln116_fu_524_p2;
    sc_signal< sc_lv<32> > add_ln116_reg_699;
    sc_signal< sc_lv<64> > gmem_addr_2_reg_704;
    sc_signal< sc_logic > ap_CS_fsm_state29;
    sc_signal< sc_lv<1> > icmp_ln120_fu_544_p2;
    sc_signal< sc_logic > ap_CS_fsm_pp3_stage0;
    sc_signal< bool > ap_block_state31_pp3_stage0_iter0;
    sc_signal< bool > ap_block_state32_pp3_stage0_iter1;
    sc_signal< bool > ap_block_state33_pp3_stage0_iter2;
    sc_signal< bool > ap_block_state33_io;
    sc_signal< bool > ap_block_pp3_stage0_11001;
    sc_signal< sc_lv<31> > j_3_fu_549_p2;
    sc_signal< sc_logic > ap_enable_reg_pp3_iter0;
    sc_signal< sc_lv<32> > vout_buffer_q0;
    sc_signal< sc_lv<32> > vout_buffer_load_reg_724;
    sc_signal< sc_logic > ap_enable_reg_pp3_iter1;
    sc_signal< sc_lv<1> > icmp_ln123_fu_560_p2;
    sc_signal< sc_logic > ap_CS_fsm_state34;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state11;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_CS_fsm_state21;
    sc_signal< bool > ap_block_pp1_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp1_exit_iter0_state22;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter2;
    sc_signal< sc_logic > ap_CS_fsm_state25;
    sc_signal< bool > ap_block_pp2_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp2_exit_iter0_state26;
    sc_signal< sc_logic > ap_enable_reg_pp2_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp2_iter2;
    sc_signal< bool > ap_block_pp3_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp3_exit_iter0_state31;
    sc_signal< sc_lv<10> > v1_buffer_address0;
    sc_signal< sc_logic > v1_buffer_ce0;
    sc_signal< sc_logic > v1_buffer_we0;
    sc_signal< sc_lv<32> > v1_buffer_q0;
    sc_signal< sc_lv<10> > v2_buffer_address0;
    sc_signal< sc_logic > v2_buffer_ce0;
    sc_signal< sc_logic > v2_buffer_we0;
    sc_signal< sc_lv<32> > v2_buffer_q0;
    sc_signal< sc_lv<10> > vout_buffer_address0;
    sc_signal< sc_logic > vout_buffer_ce0;
    sc_signal< sc_logic > vout_buffer_we0;
    sc_signal< sc_lv<32> > i_0_reg_238;
    sc_signal< bool > ap_block_state38;
    sc_signal< sc_lv<31> > ap_phi_mux_j_0_phi_fu_253_p4;
    sc_signal< sc_lv<31> > ap_phi_mux_j1_0_phi_fu_265_p4;
    sc_signal< sc_lv<64> > zext_ln101_fu_468_p1;
    sc_signal< sc_lv<64> > zext_ln107_fu_498_p1;
    sc_signal< bool > ap_block_pp2_stage0;
    sc_signal< sc_lv<64> > zext_ln123_fu_555_p1;
    sc_signal< sc_lv<64> > add_ln101_fu_442_p2;
    sc_signal< sc_lv<64> > add_ln107_fu_473_p2;
    sc_signal< sc_lv<64> > add_ln123_fu_530_p2;
    sc_signal< bool > ap_block_pp3_stage0_01001;
    sc_signal< sc_lv<32> > add_ln85_fu_341_p2;
    sc_signal< sc_lv<32> > sub_ln85_fu_354_p2;
    sc_signal< sc_lv<22> > p_lshr_fu_359_p4;
    sc_signal< sc_lv<1> > tmp_6_fu_346_p3;
    sc_signal< sc_lv<22> > sub_ln85_1_fu_369_p2;
    sc_signal< sc_lv<22> > tmp_7_fu_375_p4;
    sc_signal< sc_lv<1> > tmp_5_fu_334_p3;
    sc_signal< sc_lv<22> > select_ln85_fu_385_p3;
    sc_signal< sc_lv<22> > select_ln85_1_fu_393_p3;
    sc_signal< sc_lv<1> > icmp_ln89_fu_420_p2;
    sc_signal< sc_lv<32> > chunk_size_fu_425_p2;
    sc_signal< sc_lv<32> > zext_ln98_fu_453_p1;
    sc_signal< sc_lv<32> > zext_ln104_fu_483_p1;
    sc_signal< sc_lv<32> > zext_ln112_fu_503_p1;
    sc_signal< sc_lv<32> > zext_ln120_fu_540_p1;
    sc_signal< sc_lv<30> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_logic > ap_idle_pp1;
    sc_signal< sc_logic > ap_enable_pp1;
    sc_signal< sc_logic > ap_idle_pp2;
    sc_signal< sc_logic > ap_enable_pp2;
    sc_signal< sc_logic > ap_idle_pp3;
    sc_signal< sc_logic > ap_enable_pp3;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<30> ap_ST_fsm_state1;
    static const sc_lv<30> ap_ST_fsm_state2;
    static const sc_lv<30> ap_ST_fsm_state3;
    static const sc_lv<30> ap_ST_fsm_state4;
    static const sc_lv<30> ap_ST_fsm_state5;
    static const sc_lv<30> ap_ST_fsm_state6;
    static const sc_lv<30> ap_ST_fsm_state7;
    static const sc_lv<30> ap_ST_fsm_state8;
    static const sc_lv<30> ap_ST_fsm_state9;
    static const sc_lv<30> ap_ST_fsm_state10;
    static const sc_lv<30> ap_ST_fsm_pp0_stage0;
    static const sc_lv<30> ap_ST_fsm_state14;
    static const sc_lv<30> ap_ST_fsm_state15;
    static const sc_lv<30> ap_ST_fsm_state16;
    static const sc_lv<30> ap_ST_fsm_state17;
    static const sc_lv<30> ap_ST_fsm_state18;
    static const sc_lv<30> ap_ST_fsm_state19;
    static const sc_lv<30> ap_ST_fsm_state20;
    static const sc_lv<30> ap_ST_fsm_state21;
    static const sc_lv<30> ap_ST_fsm_pp1_stage0;
    static const sc_lv<30> ap_ST_fsm_state25;
    static const sc_lv<30> ap_ST_fsm_pp2_stage0;
    static const sc_lv<30> ap_ST_fsm_state29;
    static const sc_lv<30> ap_ST_fsm_state30;
    static const sc_lv<30> ap_ST_fsm_pp3_stage0;
    static const sc_lv<30> ap_ST_fsm_state34;
    static const sc_lv<30> ap_ST_fsm_state35;
    static const sc_lv<30> ap_ST_fsm_state36;
    static const sc_lv<30> ap_ST_fsm_state37;
    static const sc_lv<30> ap_ST_fsm_state38;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_A;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<32> ap_const_lv32_13;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_1D;
    static const sc_lv<1> ap_const_lv1_0;
    static const int C_S_AXI_DATA_WIDTH;
    static const int C_M_AXI_GMEM_USER_VALUE;
    static const int C_M_AXI_GMEM_PROT_VALUE;
    static const int C_M_AXI_GMEM_CACHE_VALUE;
    static const int C_M_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<32> ap_const_lv32_15;
    static const sc_lv<32> ap_const_lv32_16;
    static const sc_lv<32> ap_const_lv32_18;
    static const sc_lv<32> ap_const_lv32_19;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<32> ap_const_lv32_12;
    static const sc_lv<32> ap_const_lv32_14;
    static const sc_lv<31> ap_const_lv31_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<4> ap_const_lv4_F;
    static const sc_lv<32> ap_const_lv32_3F;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<32> ap_const_lv32_3FF;
    static const sc_lv<32> ap_const_lv32_FFFFFC01;
    static const sc_lv<22> ap_const_lv22_0;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<32> ap_const_lv32_400;
    static const sc_lv<31> ap_const_lv31_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const5();
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const2();
    void thread_ap_var_for_const3();
    void thread_ap_var_for_const4();
    void thread_ap_var_for_const6();
    void thread_ap_clk_no_reset_();
    void thread_add_ln101_fu_442_p2();
    void thread_add_ln107_fu_473_p2();
    void thread_add_ln116_fu_524_p2();
    void thread_add_ln123_fu_530_p2();
    void thread_add_ln85_fu_341_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp1_stage0();
    void thread_ap_CS_fsm_pp2_stage0();
    void thread_ap_CS_fsm_pp3_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state14();
    void thread_ap_CS_fsm_state15();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state21();
    void thread_ap_CS_fsm_state25();
    void thread_ap_CS_fsm_state29();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state30();
    void thread_ap_CS_fsm_state34();
    void thread_ap_CS_fsm_state38();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp1_stage0();
    void thread_ap_block_pp1_stage0_11001();
    void thread_ap_block_pp1_stage0_subdone();
    void thread_ap_block_pp2_stage0();
    void thread_ap_block_pp2_stage0_11001();
    void thread_ap_block_pp2_stage0_subdone();
    void thread_ap_block_pp3_stage0();
    void thread_ap_block_pp3_stage0_01001();
    void thread_ap_block_pp3_stage0_11001();
    void thread_ap_block_pp3_stage0_subdone();
    void thread_ap_block_state11_pp0_stage0_iter0();
    void thread_ap_block_state12_pp0_stage0_iter1();
    void thread_ap_block_state13_pp0_stage0_iter2();
    void thread_ap_block_state22_pp1_stage0_iter0();
    void thread_ap_block_state23_pp1_stage0_iter1();
    void thread_ap_block_state24_pp1_stage0_iter2();
    void thread_ap_block_state26_pp2_stage0_iter0();
    void thread_ap_block_state27_pp2_stage0_iter1();
    void thread_ap_block_state28_pp2_stage0_iter2();
    void thread_ap_block_state31_pp3_stage0_iter0();
    void thread_ap_block_state32_pp3_stage0_iter1();
    void thread_ap_block_state33_io();
    void thread_ap_block_state33_pp3_stage0_iter2();
    void thread_ap_block_state38();
    void thread_ap_condition_pp0_exit_iter0_state11();
    void thread_ap_condition_pp1_exit_iter0_state22();
    void thread_ap_condition_pp2_exit_iter0_state26();
    void thread_ap_condition_pp3_exit_iter0_state31();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_pp1();
    void thread_ap_enable_pp2();
    void thread_ap_enable_pp3();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp1();
    void thread_ap_idle_pp2();
    void thread_ap_idle_pp3();
    void thread_ap_phi_mux_j1_0_phi_fu_265_p4();
    void thread_ap_phi_mux_j_0_phi_fu_253_p4();
    void thread_ap_ready();
    void thread_chunk_size_fu_425_p2();
    void thread_empty_7_fu_328_p1();
    void thread_empty_8_fu_331_p1();
    void thread_empty_fu_325_p1();
    void thread_gmem_ARADDR();
    void thread_gmem_ARVALID();
    void thread_gmem_AWVALID();
    void thread_gmem_BREADY();
    void thread_gmem_RREADY();
    void thread_gmem_WVALID();
    void thread_gmem_blk_n_AR();
    void thread_gmem_blk_n_AW();
    void thread_gmem_blk_n_B();
    void thread_gmem_blk_n_R();
    void thread_gmem_blk_n_W();
    void thread_i_fu_414_p2();
    void thread_icmp_ln104_fu_487_p2();
    void thread_icmp_ln112_fu_507_p2();
    void thread_icmp_ln120_fu_544_p2();
    void thread_icmp_ln123_fu_560_p2();
    void thread_icmp_ln85_fu_409_p2();
    void thread_icmp_ln89_fu_420_p2();
    void thread_icmp_ln98_fu_457_p2();
    void thread_j_1_fu_492_p2();
    void thread_j_2_fu_512_p2();
    void thread_j_3_fu_549_p2();
    void thread_j_fu_462_p2();
    void thread_p_lshr_fu_359_p4();
    void thread_select_ln85_1_fu_393_p3();
    void thread_select_ln85_fu_385_p3();
    void thread_select_ln89_fu_430_p3();
    void thread_sext_ln101_fu_438_p1();
    void thread_sub_ln85_1_fu_369_p2();
    void thread_sub_ln85_fu_354_p2();
    void thread_tmp_5_fu_334_p3();
    void thread_tmp_6_fu_346_p3();
    void thread_tmp_7_fu_375_p4();
    void thread_tmp_8_fu_401_p3();
    void thread_v1_buffer_address0();
    void thread_v1_buffer_ce0();
    void thread_v1_buffer_we0();
    void thread_v2_buffer_address0();
    void thread_v2_buffer_ce0();
    void thread_v2_buffer_we0();
    void thread_vout_buffer_address0();
    void thread_vout_buffer_ce0();
    void thread_vout_buffer_we0();
    void thread_zext_ln101_fu_468_p1();
    void thread_zext_ln104_fu_483_p1();
    void thread_zext_ln107_fu_498_p1();
    void thread_zext_ln112_fu_503_p1();
    void thread_zext_ln116_fu_518_p1();
    void thread_zext_ln120_fu_540_p1();
    void thread_zext_ln123_fu_555_p1();
    void thread_zext_ln98_fu_453_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
